import org.palladiosimulator.architecturaltemplates.catalog.black.ProfilesLibrary;
import org.palladiosimulator.architecturaltemplates.microservices.catalog.black.ProfilesLibrary;
import libraries.Util;

modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype PCMComposition uses pcm::core::composition('http://palladiosimulator.org/PalladioComponentModel/5.1');

transformation StaticSystemCompletion(inout pcmAllocation : PCM_ALLOC);

property allocation : Allocation = pcmAllocation.rootObjects()![Allocation];
property system : System = allocation.system_Allocation;

// String constants of the Static System Profile					   			 
property staticSystemProfile : String = "StaticSystemProfile";
property staticReplicatedAssemblyContextStereotype : String = "StaticReplicatedAssemblyContext";
// String constants of the Dynamic System Profile					   			 
property dynamicSystemProfile : String = "DynamicSystemProfile";
property dynamicReplicatedAssemblyContextStereotype : String = "DynamicReplicatedAssemblyContext";
// Tagged Values of the Static System Profile
property numberOfReplicasTaggedValue : String = "numberOfReplicas";
// String constants of the Allocation Strategy Profiles				   			 
property singleServicePerResourceContainerProfile : String = "singleServicesPerResourceContainerProfile";
property multipleServicesPerResourceContainerProfile : String = "MultipleServicesPerResourceContainerProfile";


main() {
	log('Library Completion "StaticSystem" started');	
	
	assert fatal(isProfileApplied(system.oclAsType(EObject), staticSystemProfile)
		or isProfileApplied(system.oclAsType(EObject), dynamicSystemProfile))
		with log ("The system has no Profile applied!");
	
	assert fatal(isProfileApplied(allocation.oclAsType(EObject), singleServicePerResourceContainerProfile)
		or isProfileApplied(allocation.oclAsType(EObject), multipleServicesPerResourceContainerProfile))
		with log ("The resource environment has no Profile applied!");
	// Ensure that system is marked with replication profile
	if(not isProfileApplied(system.oclAsType(EObject), replicatedProfile)) {
		applyProfile(system.oclAsType(EObject), replicatedProfile);
	};
		
	var originalAssemblyContexts : Set(AssemblyContext);
	if (isProfileApplied(system.oclAsType(EObject), staticSystemProfile)) {
		originalAssemblyContexts := system.assemblyContexts__ComposedStructure
			->select(ac | hasAppliedStereotype(ac, staticReplicatedAssemblyContextStereotype));
	} else {
		originalAssemblyContexts := system.assemblyContexts__ComposedStructure
			->select(ac | hasAppliedStereotype(ac, dynamicReplicatedAssemblyContextStereotype));
	};
	var numberOfReplicas : Integer;
	originalAssemblyContexts->forEach(originalAssemblyContext) {
		if (isProfileApplied(system.oclAsType(EObject), staticSystemProfile)) {
			numberOfReplicas := getIntTaggedValue(originalAssemblyContext, numberOfReplicasTaggedValue, staticReplicatedAssemblyContextStereotype);
		} else {
			numberOfReplicas := getIntTaggedValue(originalAssemblyContext, numberOfReplicasTaggedValue, dynamicReplicatedAssemblyContextStereotype);
		};
		// Mark assembly context as original
		applyStereotype(originalAssemblyContext, originalAssemblyContextStereotype);
		// duplicate (create replica) of original assembly context
		var counter : Integer := 1;
		while(counter < numberOfReplicas) {
	 		originalAssemblyContext->map duplicateAssemblyContext(counter);
	 		counter := counter + 1;
		};	
	};
	
	log('Library Completion "StaticSystem" finished');
}

mapping AssemblyContext::duplicateAssemblyContext(counter : Integer) : AssemblyContext {
	entityName := self.encapsulatedComponent__AssemblyContext.entityName+"_Replica"+counter.toString();
	encapsulatedComponent__AssemblyContext := self.encapsulatedComponent__AssemblyContext;
	parentStructure__AssemblyContext := self.parentStructure__AssemblyContext;
	configParameterUsages__AssemblyContext := self.configParameterUsages__AssemblyContext;
	
	applyStereotype(result, duplicateAssemblyContextStereotype);
	setOriginalAssemblyContext(result, self);
}
