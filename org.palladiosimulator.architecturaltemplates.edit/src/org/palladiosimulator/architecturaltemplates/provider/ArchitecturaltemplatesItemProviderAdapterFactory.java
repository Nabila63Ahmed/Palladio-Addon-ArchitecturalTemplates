/**
 */
package org.palladiosimulator.architecturaltemplates.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.palladiosimulator.architecturaltemplates.util.ArchitecturaltemplatesAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc --> <!--
 * end-user-doc -->
 * @generated
 */
public class ArchitecturaltemplatesItemProviderAdapterFactory extends ArchitecturaltemplatesAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier {

	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	public ArchitecturaltemplatesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.architecturaltemplates.AT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ATItemProvider atItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.architecturaltemplates.AT}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Adapter createATAdapter() {
		if (atItemProvider == null) {
			atItemProvider = new ATItemProvider(this);
		}

		return atItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.architecturaltemplates.Catalog} instances.
	 * <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * @generated
	 */
	protected CatalogItemProvider catalogItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.architecturaltemplates.Catalog}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCatalogAdapter() {
		if (catalogItemProvider == null) {
			catalogItemProvider = new CatalogItemProvider(this);
		}

		return catalogItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.architecturaltemplates.Role} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleItemProvider roleItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.architecturaltemplates.Role}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Adapter createRoleAdapter() {
		if (roleItemProvider == null) {
			roleItemProvider = new RoleItemProvider(this);
		}

		return roleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.palladiosimulator.architecturaltemplates.OCLConstraint} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	protected OCLConstraintItemProvider oclConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.architecturaltemplates.OCLConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOCLConstraintAdapter() {
		if (oclConstraintItemProvider == null) {
			oclConstraintItemProvider = new OCLConstraintItemProvider(this);
		}

		return oclConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.palladiosimulator.architecturaltemplates.QVTOCompletion} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	protected QVTOCompletionItemProvider qvtoCompletionItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.architecturaltemplates.QVTOCompletion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQVTOCompletionAdapter() {
		if (qvtoCompletionItemProvider == null) {
			qvtoCompletionItemProvider = new QVTOCompletionItemProvider(this);
		}

		return qvtoCompletionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.architecturaltemplates.PCMBlackboardCompletionParameter} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMBlackboardCompletionParameterItemProvider pcmBlackboardCompletionParameterItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.palladiosimulator.architecturaltemplates.PCMBlackboardCompletionParameter}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Adapter createPCMBlackboardCompletionParameterAdapter() {
		if (pcmBlackboardCompletionParameterItemProvider == null) {
			pcmBlackboardCompletionParameterItemProvider = new PCMBlackboardCompletionParameterItemProvider(this);
		}

		return pcmBlackboardCompletionParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.architecturaltemplates.PCMTemplateCompletionParameter} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMTemplateCompletionParameterItemProvider pcmTemplateCompletionParameterItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.palladiosimulator.architecturaltemplates.PCMTemplateCompletionParameter}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Adapter createPCMTemplateCompletionParameterAdapter() {
		if (pcmTemplateCompletionParameterItemProvider == null) {
			pcmTemplateCompletionParameterItemProvider = new PCMTemplateCompletionParameterItemProvider(this);
		}

		return pcmTemplateCompletionParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.architecturaltemplates.PCMOutputCompletionParameter} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMOutputCompletionParameterItemProvider pcmOutputCompletionParameterItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.palladiosimulator.architecturaltemplates.PCMOutputCompletionParameter}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Adapter createPCMOutputCompletionParameterAdapter() {
		if (pcmOutputCompletionParameterItemProvider == null) {
			pcmOutputCompletionParameterItemProvider = new PCMOutputCompletionParameterItemProvider(this);
		}

		return pcmOutputCompletionParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.palladiosimulator.architecturaltemplates.ReconfigurationFolder} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	protected ReconfigurationFolderItemProvider reconfigurationFolderItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.palladiosimulator.architecturaltemplates.ReconfigurationFolder}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Adapter createReconfigurationFolderAdapter() {
		if (reconfigurationFolderItemProvider == null) {
			reconfigurationFolderItemProvider = new ReconfigurationFolderItemProvider(this);
		}

		return reconfigurationFolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.palladiosimulator.architecturaltemplates.IsolatedPCMTemplateCompletionParameter} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	protected IsolatedPCMTemplateCompletionParameterItemProvider isolatedPCMTemplateCompletionParameterItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.architecturaltemplates.IsolatedPCMTemplateCompletionParameter}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIsolatedPCMTemplateCompletionParameterAdapter() {
		if (isolatedPCMTemplateCompletionParameterItemProvider == null) {
			isolatedPCMTemplateCompletionParameterItemProvider = new IsolatedPCMTemplateCompletionParameterItemProvider(
					this);
		}

		return isolatedPCMTemplateCompletionParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.palladiosimulator.architecturaltemplates.PCMFileExtension} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	protected PCMFileExtensionItemProvider pcmFileExtensionItemProvider;

	/**
	 * This creates an adapter for a {@link org.palladiosimulator.architecturaltemplates.PCMFileExtension}.
	 * <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCMFileExtensionAdapter() {
		if (pcmFileExtensionItemProvider == null) {
			pcmFileExtensionItemProvider = new PCMFileExtensionItemProvider(this);
		}

		return pcmFileExtensionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.palladiosimulator.architecturaltemplates.GenericFileExtension} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	protected GenericFileExtensionItemProvider genericFileExtensionItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.palladiosimulator.architecturaltemplates.GenericFileExtension}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Adapter createGenericFileExtensionAdapter() {
		if (genericFileExtensionItemProvider == null) {
			genericFileExtensionItemProvider = new GenericFileExtensionItemProvider(this);
		}

		return genericFileExtensionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

}
