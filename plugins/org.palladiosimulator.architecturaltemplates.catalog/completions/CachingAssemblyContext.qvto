import org.palladiosimulator.architecturaltemplates.catalog.black.ProfilesLibrary;

modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.1';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.1';
modeltype PCMComposition uses pcm::core::composition('http://palladiosimulator.org/PalladioComponentModel/5.1');
modeltype PCMSEFF uses pcm::seff('http://palladiosimulator.org/PalladioComponentModel/SEFF/5.1');
modeltype PCM_COMPLETION uses 'http://palladiosimulator.org/AnalyzerFramework/Completions/1.0';
modeltype PCMSEFF_PERFORMANCE uses pcm::seff::seff_performance('http://palladiosimulator.org/PalladioComponentModel/SEFF/5.1');
modeltype PCM_RESOURCETYPE uses pcm::resourcetype('http://palladiosimulator.org/PalladioComponentModel/5.1');

transformation CachingAssemblyContext(inout pcmAllocation : PCM_ALLOC);

// String constants		   			 
property CACHING_ASSEMBLY_CONTEXT_PROFILE : String = "CachingAssemblyContextProfile";
property CACHED_ASSEMBLY_CONTEXT_SYSTEM_STEREOTYPE : String = "CachedAssemblyContextSystem";
property CACHED_ASSEMBLY_CONTEXT_STEREOTYPE : String = "CachedAssemblyContext";
property HIT_RATE_TAGGED_VALUE : String = "hitRate";

// Models
property allocation : Allocation = pcmAllocation.rootObjects()![Allocation];
property system : System = allocation.system_Allocation;
property resourceEnvironment : ResourceEnvironment = allocation.targetResourceEnvironment_Allocation;

main() {
	var assemblyContexts : Set(AssemblyContext) := system.assemblyContexts__ComposedStructure;
	
	assert fatal(isProfileApplied(system.oclAsType(EObject), CACHING_ASSEMBLY_CONTEXT_PROFILE))
		with log ("The system has no profile" + CACHING_ASSEMBLY_CONTEXT_PROFILE + " applied!");	

	assert fatal(hasAppliedStereotype(system, CACHED_ASSEMBLY_CONTEXT_SYSTEM_STEREOTYPE))
		with log ("The system has no stereotype" + CACHED_ASSEMBLY_CONTEXT_SYSTEM_STEREOTYPE + " applied!");
		
	assert fatal(hasAppliedStereotype(assemblyContexts, CACHED_ASSEMBLY_CONTEXT_STEREOTYPE))
		with log ("No assembly context has the stereotype" + CACHED_ASSEMBLY_CONTEXT_STEREOTYPE + " applied!");
	
	//get the stereotyped AssemblyContexts
	var cachedAssemblyContexts : Set(AssemblyContext) :=
		assemblyContexts
		->select(assemblyContext : AssemblyContext |
			hasAppliedStereotype(assemblyContext, CACHED_ASSEMBLY_CONTEXT_STEREOTYPE)
		);
	
	cachedAssemblyContexts->forEach(cachedAssemblyContext) {
		createCache(cachedAssemblyContext);
	}
}

helper createCache(originalAssemblyContext : AssemblyContext) {	
	findIncomingConnectors(originalAssemblyContext)
		->map createCacheForConnector(originalAssemblyContext);
}

query findIncomingConnectors(originalAssemblyContext : AssemblyContext) : Set(Connector) {
	var incomingConnectors : Set(Connector) :=
		system
		.connectors__ComposedStructure
		[AssemblyConnector]
		->select(assemblyConnector | 
			assemblyConnector.providingAssemblyContext_AssemblyConnector.id = originalAssemblyContext.id
		);
		
	incomingConnectors +=
		system
		.connectors__ComposedStructure
		[ProvidedDelegationConnector]
		->select(assemblyConnector | 
			assemblyConnector.assemblyContext_ProvidedDelegationConnector.id = originalAssemblyContext.id
		);
	
	return incomingConnectors;
}


mapping inout Connector::createCacheForConnector(originalAssemblyContext : AssemblyContext) : Connector 
	disjuncts AssemblyConnector::createCacheForAssemblyConnector,
			  ProvidedDelegationConnector::createCacheForProvidedDelegationConnector {}
			  
abstract mapping inout Connector::abstractCreateCacheForConnector(originalAssemblyContext : AssemblyContext) : Connector {
	entityName := self.entityName+"_from_cache";
	parentStructure__Connector := self.parentStructure__Connector;
}

mapping inout AssemblyConnector::createCacheForAssemblyConnector(originalAssemblyContext : AssemblyContext) : AssemblyConnector
	inherits Connector::abstractCreateCacheForConnector
 {
	var cacheAssemblyContext : AssemblyContext :=
		self
		.providingAssemblyContext_AssemblyConnector
		.createCache(self.providedRole_AssemblyConnector);
	
	
	// new assembly connector for original container: cache -> providing assembly context
	requiringAssemblyContext_AssemblyConnector := cacheAssemblyContext;
	providingAssemblyContext_AssemblyConnector := self.providingAssemblyContext_AssemblyConnector;
	providedRole_AssemblyConnector := self.providedRole_AssemblyConnector;
	requiredRole_AssemblyConnector := cacheAssemblyContext
		.encapsulatedComponent__AssemblyContext
		.requiredRoles_InterfaceRequiringEntity[OperationRequiredRole]->asOrderedSet()->at(1);
	
	// old assembly connector: requiring assembly context (as is!) -> cache (new!)
	self.providingAssemblyContext_AssemblyConnector := cacheAssemblyContext;
	self.providedRole_AssemblyConnector :=
		cacheAssemblyContext
		.encapsulatedComponent__AssemblyContext
		.providedRoles_InterfaceProvidingEntity![OperationProvidedRole];
}

mapping inout ProvidedDelegationConnector::createCacheForProvidedDelegationConnector(originalAssemblyContext : AssemblyContext) : AssemblyConnector
		inherits Connector::abstractCreateCacheForConnector 
{
	var cacheAssemblyContext : AssemblyContext :=
		self
		.assemblyContext_ProvidedDelegationConnector
		.createCache(self.innerProvidedRole_ProvidedDelegationConnector);
		
	
	// new assembly connector: cache -> providing assembly context
	requiringAssemblyContext_AssemblyConnector := cacheAssemblyContext;
	providingAssemblyContext_AssemblyConnector := self.assemblyContext_ProvidedDelegationConnector;
	providedRole_AssemblyConnector := self.innerProvidedRole_ProvidedDelegationConnector;
	requiredRole_AssemblyConnector := cacheAssemblyContext
		.encapsulatedComponent__AssemblyContext
		.requiredRoles_InterfaceRequiringEntity[OperationRequiredRole]->asOrderedSet()->at(1);
	
	// old provided delegation connector: outer provided role (as is!) -> cache (new!)
	self.innerProvidedRole_ProvidedDelegationConnector := cacheAssemblyContext
			.encapsulatedComponent__AssemblyContext
			.providedRoles_InterfaceProvidingEntity![OperationProvidedRole];
	self.assemblyContext_ProvidedDelegationConnector := cacheAssemblyContext;
}

helper AssemblyContext::createCache(operationProvidedRole : OperationProvidedRole) : AssemblyContext {
	var cache : BasicComponent := self.map assemblyToCacheBasicComponent(operationProvidedRole);
	var cacheAssemblyContext : AssemblyContext := new AssemblyContext(cache);	
	var cacheAllocationContext : AllocationContext := new AllocationContext(cacheAssemblyContext, findResourceContainer(self));
	
	return cacheAssemblyContext;
}

mapping AssemblyContext::assemblyToCacheBasicComponent(operationProvidedRole : OperationProvidedRole) : BasicComponent {
	var hitRate : Real := getDoubleTaggedValue(self, HIT_RATE_TAGGED_VALUE, CACHED_ASSEMBLY_CONTEXT_STEREOTYPE);

	entityName := "Cache_" + self.entityName + "_" + operationProvidedRole.entityName;
	providedRoles_InterfaceProvidingEntity += new OperationProvidedRole(operationProvidedRole);
	requiredRoles_InterfaceRequiringEntity += new OperationRequiredRole(operationProvidedRole);	
	repository__RepositoryComponent := self.encapsulatedComponent__AssemblyContext.repository__RepositoryComponent;
	componentParameterUsage_ImplementationComponentType := self.encapsulatedComponent__AssemblyContext[ImplementationComponentType].componentParameterUsage_ImplementationComponentType;
	operationProvidedRole.providedInterface__OperationProvidedRole.signatures__OperationInterface->forEach(operationSignature){
  		serviceEffectSpecifications__BasicComponent += new ResourceDemandingSEFF(operationSignature, requiredRoles_InterfaceRequiringEntity![OperationRequiredRole], hitRate);
	};
};

constructor OperationProvidedRole::OperationProvidedRole(pr : OperationProvidedRole) {
	entityName := "Provided_" + pr.providedInterface__OperationProvidedRole.entityName + "_Cache";
	providedInterface__OperationProvidedRole := pr.providedInterface__OperationProvidedRole;
}

constructor OperationRequiredRole::OperationRequiredRole(rr : OperationProvidedRole) {
	entityName := "Required_" + rr.providedInterface__OperationProvidedRole.entityName +"_Cache";
	requiredInterface__OperationRequiredRole := rr.providedInterface__OperationProvidedRole;
}

constructor ResourceDemandingSEFF::ResourceDemandingSEFF(operationSignature : OperationSignature, requiredRole : OperationRequiredRole, hitRate : Real){
	describedService__SEFF := operationSignature;
	var startAction : StartAction := object StartAction{};
	var branchAction : BranchAction := object BranchAction{
		entityName := "hitRate Branch";
		predecessor_AbstractAction := startAction;
		branches_Branch += object ProbabilisticBranchTransition{
		    entityName := "Cache hit for "+requiredRole.entityName;
		    branchProbability := hitRate;
		    branchBehaviour_BranchTransition := object ResourceDemandingBehaviour{
		    	var innerStartAction : StartAction := object StartAction{};
		    	var innerStopAction : StopAction := object StopAction{
					predecessor_AbstractAction := innerStartAction;
				};
				
				steps_Behaviour += innerStartAction;
				steps_Behaviour += innerStopAction;
		    };
		};
		branches_Branch += object ProbabilisticBranchTransition{
		    entityName := "Cache miss for "+requiredRole.entityName;
		    branchProbability := 1.0-hitRate;
		    branchBehaviour_BranchTransition := object ResourceDemandingBehaviour{
		    	var innerStartAction : StartAction := object StartAction{};
		    	var delegatingExternalCallAction : DelegatingExternalCallAction := object DelegatingExternalCallAction{
		    		predecessor_AbstractAction := innerStartAction;
		    		entityName := "Call "+operationSignature.entityName;
		    		role_ExternalService := requiredRole;
		    		calledService_ExternalService := operationSignature;
		    	};
		    	var innerStopAction : StopAction := object StopAction{
					predecessor_AbstractAction := delegatingExternalCallAction;
				};
				
				steps_Behaviour += innerStartAction;
				steps_Behaviour += delegatingExternalCallAction;
				steps_Behaviour += innerStopAction;
		    };
		};
	};
	var stopAction : StopAction := object StopAction{
		predecessor_AbstractAction := branchAction;
	};
	steps_Behaviour += startAction;
	steps_Behaviour += branchAction;
	steps_Behaviour += stopAction;
}

constructor AssemblyContext::AssemblyContext(bc : RepositoryComponent){
	entityName := "Assembly_"+bc.entityName;
	encapsulatedComponent__AssemblyContext := bc;
	parentStructure__AssemblyContext := system;
}

constructor AllocationContext::AllocationContext(ac : AssemblyContext, rc: ResourceContainer){
	entityName := "Allocation_" + ac.entityName;
	assemblyContext_AllocationContext := ac;
	resourceContainer_AllocationContext := rc;
	allocation_AllocationContext := allocation;
}

/**
 * Returns the ResourceContainer the AllocationContext corresponds to.
 */
query findResourceContainer(assemblyContext : AssemblyContext) : ResourceContainer {
	return  allocation.allocationContexts_Allocation->selectOne(
		ac : AllocationContext | 
		ac.assemblyContext_AllocationContext.id = assemblyContext.id
		).resourceContainer_AllocationContext;
}

