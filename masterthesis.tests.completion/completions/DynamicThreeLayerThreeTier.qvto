import org.scaledl.architecturaltemplates.repositories.cloudscale.black.ProfilesLibrary;
import StaticResourceContainerLoadbalancing;

modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype PCM_USE uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.1';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1';
modeltype PCMComposition uses pcm::core::composition('http://palladiosimulator.org/PalladioComponentModel/5.1');
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.1';
/**
 * Transforms a 3-layer PCM instance (System and Resource Container annotated with Dynamic 3-layer 3-tier AT roles) 
 * to a PCM instance that is a DynamicHorizontalScalingResourceContainerSystem. 
 * Moreover, the middle tier resource container is loadbalanced and 
 * replicated by the defined number of replicas. 
 *
 * @author Daria Giacinto
 **/
transformation DynamicThreeLayerThreeTier(inout pcmRepo : PCM_REP, inout pcmSystem : PCM_SYS, inout pcmResEnv : PCM_RES_ENV, inout pcmAllocation : PCM_ALLOC) 
						   			 access transformation StaticResourceContainerLoadbalancing;	
	   
main() {	
	log ('Architectural Template Transformation "Dynamic Three Layer Three Tier" started!');
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var system : System := allocation.system_Allocation;
	var resourceEnvironment : ResourceEnvironment := allocation.targetResourceEnvironment_Allocation;
	var resourceContainers : Set(ResourceContainer) := resourceEnvironment.resourceContainer_ResourceEnvironment;
	
	assert fatal(isProfileApplied(system.oclAsType(EObject),"DynamicThreeLayerThreeTierProfile"))
		with log ("The System has no DynamicThreeLayerThreeTierProfile applied.");
		
	assert fatal(isProfileApplied(resourceEnvironment.oclAsType(EObject),"DynamicThreeLayerThreeTierProfile"))
		with log ("The resource environment has no DynamicThreeLayerThreeTierProfile applied.");
	
	assert fatal(hasAppliedStereotype(system,"DynamicThreeLayerThreeTierSystem"))
		with log ("The System is not a Dynamic Three Layer Three Tier System");
		
	assert fatal(appliedStereotypesEqualsOne(resourceContainers,"ReplicableMiddleTier"))
		with log ("The Resource Environment consists of zero or more than one Replicable Middle Tier Resource Containers");	
		
	var middleTierResourceContainer : ResourceContainer := resourceContainers->selectOne(resourceContainer | hasAppliedStereotype(resourceContainer,"ReplicableMiddleTier"));
	convertMiddleTierIntoReplicableResourceContainer(middleTierResourceContainer,system);
	
	new StaticResourceContainerLoadbalancing(pcmRepo, pcmSystem , pcmResEnv, pcmAllocation)->transform();
	
	log ('Architectural Template Transformation "Dynamic Three Layer Three Tier" finished!');
}


	
helper convertMiddleTierIntoReplicableResourceContainer(middleTier : ResourceContainer, system : System){
	applyProfile(system.oclAsType(EObject), "DynamicHorizontalScalingResourceContainerProfile");
	applyStereotype(system, "DynamicHorizontalScalingResourceContainerSystem");
	applyProfile(middleTier.oclAsType(EObject), "DynamicHorizontalScalingResourceContainerProfile");
	applyStereotype(middleTier, "ReplicableResourceContainer");
	setReplicableResourceContainerTaggedValues(middleTier);
	removeStereotypeApplications(middleTier,"ReplicableMiddleTier");
}

helper setReplicableResourceContainerTaggedValues(middleTier : ResourceContainer){
	var scaleInThreshold : Real := getDoubleTaggedValue(middleTier, "scaleInThreshold", "ReplicableMiddleTier");
	var scaleOutThreshold : Real:= getDoubleTaggedValue(middleTier, "scaleOutThreshold", "ReplicableMiddleTier");
	var numberOfMiddleTierReplicas : Integer := getIntTaggedValue(middleTier, "numberOfReplicas", "ReplicableMiddleTier");	
 	setTaggedValue(middleTier, numberOfMiddleTierReplicas, "ReplicableResourceContainer", "numberOfReplicas");
 	setDoubleTaggedValue(middleTier, scaleInThreshold, "ReplicableResourceContainer", "scaleInThreshold");
 	setDoubleTaggedValue(middleTier, scaleOutThreshold, "ReplicableResourceContainer", "scaleOutThreshold");
}
