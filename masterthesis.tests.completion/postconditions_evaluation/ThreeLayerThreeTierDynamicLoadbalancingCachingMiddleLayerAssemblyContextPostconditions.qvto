import org.palladiosimulator.architecturaltemplates.catalog.black.ProfilesLibrary;
import DynamicLoadbalancingCachingAssemblyContextPostconditions;

modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype PCMComposition uses pcm::core::composition('http://palladiosimulator.org/PalladioComponentModel/5.1');
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.1';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.1';

transformation ThreeLayerThreeTierDynamicLoadbalancingCachingAssemblyContextPostconditions(in allocationBeforeCompletion : PCM_ALLOC, in allocationAfterCompletion : PCM_ALLOC);

main() {

log('ThreeLayerThreeTierDynamicLoadbalancingCachingAssemblyContextPostconditions Test started');

	var oldAllocation : Allocation := allocationBeforeCompletion.rootObjects()![Allocation];
	var newAllocation : Allocation := allocationAfterCompletion.rootObjects()![Allocation];
	
	var oldSystem : System := oldAllocation.system_Allocation;
	var newSystem : System := newAllocation.system_Allocation;
	
	var newAssemblyContexts : Set(AssemblyContext) := newSystem.assemblyContexts__ComposedStructure;
	
	// created based on DynamicThreeLayerThreeTierPostconditions.qvto and DynamicLoadbalancingCachingAssemblyContextPostconditions.qvto
	// removed the tests that verified that the architectural configuration has not changed (because there should be no completion to chenge anything in a pure architectural style AT)
	// testNewRepositoryEqualsOldRepository, testNewSystemEqualsOldSystem, testNewResEnvEqualsOldResEnv, testNewAllocationEqualsOldAllocation
	testSystemHasAtLeastThreeAssemblies(newAssemblyContexts);
	testAllAssembliesAreThreeLayerStereotyped(newAssemblyContexts);
	testSystemHasAtLeastOnePresentationLayerAssembly(newAssemblyContexts);
	testSystemHasAtLeastOneMiddleLayerAssembly(newAssemblyContexts);
	testSystemHasAtLeastOneDataLayerAssembly(newAssemblyContexts);
	testMiddleLayerAssembliesNotRequirePresentationLayerAssembly(newSystem);
	testDataLayerAssembliesNotRequirePresentationLayerAssembly(newSystem);
	testPresentationLayerAssembliesNotRequireDataLayerAssembly(newSystem);
	testDataLayerAssembliesNotRequireMiddleLayerAssembly(newSystem);
	testNoProvidedDelegationConnectorToMiddleLayerAssemblies(newSystem);
	testNoProvidedDelegationConnectorToDataLayerAssemblies(newSystem);
	testNoRequiredDelegationConnectorFromPresentationLayerAssemblies(newSystem);
	testNoRequiredDelegationConnectorFromMiddleLayerAssemblies(newSystem);
//	testNewRepositoryEqualsOldRepository(newSystem, oldSystem); // removed
//	testNewSystemEqualsOldSystem(newSystem, oldSystem); // removed
//	testNewResEnvEqualsOldResEnv(newAllocation.targetResourceEnvironment_Allocation, oldAllocation.targetResourceEnvironment_Allocation); // removed
//	testNewAllocationEqualsOldAllocation(newAllocation, oldAllocation); // removed
	testPresentationLayerAssembliesAllocatedToPresentationTier(oldAllocation, newAssemblyContexts);
	testMiddleLayerAssembliesAllocatedToMiddleTier(oldAllocation, newAssemblyContexts);
	testDataLayerAssembliesAllocatedToDataTier(oldAllocation, newAssemblyContexts);
	
	new DynamicLoadbalancingCachingAssemblyContextPostconditions(allocationBeforeCompletion, allocationAfterCompletion)->transform();
	
log('ThreeLayerThreeTierDynamicLoadbalancingCachingAssemblyContextPostconditions Test finished');

}

query testSystemHasAtLeastThreeAssemblies(assemblyContexts : Set(AssemblyContext)){
	assert error(assemblyContexts->size() >= 3)
		with log('The System has <= 2 Assembly Contexts. At least 3 are needed.');
}

query testAllAssembliesAreThreeLayerStereotyped(assemblyContexts : Set(AssemblyContext)){
	var allStereotyped: Boolean := assemblyContexts->forAll(assembly : AssemblyContext|
	hasAppliedStereotype(assembly,"PresentationLayerAssembly") 
	or hasAppliedStereotype(assembly,"MiddleLayerAssembly") 
	or hasAppliedStereotype(assembly,"DataLayerAssembly"));
	assert error(allStereotyped) 
		with log('The System has at least one Assembly Context that is not stereotyped.');
}

query testSystemHasAtLeastOnePresentationLayerAssembly(assemblyContexts : Set(AssemblyContext)){
	var presentationLayerAssemblies : Set(AssemblyContext) := assemblyContexts->select(assembly : AssemblyContext| hasAppliedStereotype(assembly,"PresentationLayerAssembly"));
	assert error(presentationLayerAssemblies->size() >= 1) 
		with log('The System has no Presentation Layer Assembly.');
}

query testSystemHasAtLeastOneMiddleLayerAssembly(assemblyContexts : Set(AssemblyContext)){
	var middleLayerAssemblies : Set(AssemblyContext) := assemblyContexts->select(assembly : AssemblyContext| hasAppliedStereotype(assembly,"MiddleLayerAssembly"));
	assert error(middleLayerAssemblies->size() >= 1) 
		with log('The System has no Middle Layer Assembly.');
}

query testSystemHasAtLeastOneDataLayerAssembly(assemblyContexts : Set(AssemblyContext)){
	var dataLayerAssemblies : Set(AssemblyContext) := assemblyContexts->select(assembly : AssemblyContext| hasAppliedStereotype(assembly,"DataLayerAssembly"));
	assert error(dataLayerAssemblies->size() >= 1) 
		with log('The System has no Data Layer Assembly.');
}

query testMiddleLayerAssembliesNotRequirePresentationLayerAssembly(system : System){
	var assemblyConnectors : Set(AssemblyConnector) := system.connectors__ComposedStructure->selectByType(AssemblyConnector);
	var middleNotRequirePresentation : Boolean := assemblyConnectors->forAll(ac : AssemblyConnector
		|not(hasAppliedStereotype(ac.providingAssemblyContext_AssemblyConnector,'PresentationLayerAssembly') 
		and ((hasAppliedStereotype(ac.requiringAssemblyContext_AssemblyConnector,'MiddleLayerAssembly')))));
	assert error(middleNotRequirePresentation) 
		with log('Middle Layer Assembly requires Presentation Layer Assembly.(AssemblyConntector)');	
	var assemblyInfrastructureConnectors : Set(AssemblyInfrastructureConnector) := system.connectors__ComposedStructure->selectByType(AssemblyInfrastructureConnector);
	 middleNotRequirePresentation := assemblyInfrastructureConnectors->forAll(ac : AssemblyInfrastructureConnector
		|not(hasAppliedStereotype(ac.providingAssemblyContext__AssemblyInfrastructureConnector,'PresentationLayerAssembly') 
		and ((hasAppliedStereotype(ac.requiringAssemblyContext__AssemblyInfrastructureConnector,'MiddleLayerAssembly')))));
	assert error(middleNotRequirePresentation) 
		with log('Middle Layer Assembly requires Presentation Layer Assembly.(AssemblyInfrastructureConntector)');	
}

query testDataLayerAssembliesNotRequirePresentationLayerAssembly(system : System){
	var assemblyConnectors : Set(AssemblyConnector) := system.connectors__ComposedStructure->selectByType(AssemblyConnector);
	var dataNotRequirePresentation : Boolean := assemblyConnectors->forAll(ac|not(hasAppliedStereotype(ac.providingAssemblyContext_AssemblyConnector,'PresentationLayerAssembly') 
	and (hasAppliedStereotype(ac.requiringAssemblyContext_AssemblyConnector,'DataLayerAssembly'))));
	assert error(dataNotRequirePresentation) 
		with log('Data Layer Assembly requires Presentation Layer Assembly.(AssemblyConntector)');
	var assemblyInfrastructureConnectors : Set(AssemblyInfrastructureConnector) := system.connectors__ComposedStructure->selectByType(AssemblyInfrastructureConnector);
	dataNotRequirePresentation := assemblyInfrastructureConnectors->forAll(ac|not(hasAppliedStereotype(ac.providingAssemblyContext__AssemblyInfrastructureConnector,'PresentationLayerAssembly') 
	and (hasAppliedStereotype(ac.requiringAssemblyContext__AssemblyInfrastructureConnector,'DataLayerAssembly'))));
	assert error(dataNotRequirePresentation) 
		with log('Data Layer Assembly requires Presentation Layer Assembly.(AssemblyInfrastructureConntector)');
}

query testPresentationLayerAssembliesNotRequireDataLayerAssembly(system : System){
	var assemblyConnectors : Set(AssemblyConnector) := system.connectors__ComposedStructure->selectByType(AssemblyConnector);
	var presentationNotRequireData : Boolean := assemblyConnectors->forAll(ac|
	not(hasAppliedStereotype(ac.requiringAssemblyContext_AssemblyConnector,'PresentationLayerAssembly') 
	and hasAppliedStereotype(ac.providingAssemblyContext_AssemblyConnector,'DataLayerAssembly')));
	assert error(presentationNotRequireData) 
		with log('Presentation Layer Assembly requires Data Layer Assembly.(AssemblyConntector)');
	var assemblyInfrastructureConnectors : Set(AssemblyInfrastructureConnector) := system.connectors__ComposedStructure->selectByType(AssemblyInfrastructureConnector);
	presentationNotRequireData := assemblyInfrastructureConnectors->forAll(ac|
	not(hasAppliedStereotype(ac.requiringAssemblyContext__AssemblyInfrastructureConnector,'PresentationLayerAssembly') 
	and hasAppliedStereotype(ac.providingAssemblyContext__AssemblyInfrastructureConnector,'DataLayerAssembly')));
	assert error(presentationNotRequireData) 
		with log('Presentation Layer Assembly requires Data Layer Assembly.(AssemblyInfrastructureConntector)');
}

query testDataLayerAssembliesNotRequireMiddleLayerAssembly(system : System){
	var assemblyConnectors : Set(AssemblyConnector) := system.connectors__ComposedStructure->selectByType(AssemblyConnector);
	var dataNotRequireMiddle : Boolean := assemblyConnectors->forAll(ac|
	not(hasAppliedStereotype(ac.requiringAssemblyContext_AssemblyConnector,'DataLayerAssembly') 
	and hasAppliedStereotype(ac.providingAssemblyContext_AssemblyConnector,'MiddleLayerAssembly')));
	assert error(dataNotRequireMiddle) 
		with log('Data Layer Assembly requires Middle Layer Assembly.(AssemblyConntector)');
	var assemblyInfrastructureConnectors : Set(AssemblyInfrastructureConnector) := system.connectors__ComposedStructure->selectByType(AssemblyInfrastructureConnector);
 	dataNotRequireMiddle := assemblyInfrastructureConnectors->forAll(ac|
	not(hasAppliedStereotype(ac.requiringAssemblyContext__AssemblyInfrastructureConnector,'DataLayerAssembly') 
	and hasAppliedStereotype(ac.providingAssemblyContext__AssemblyInfrastructureConnector,'MiddleLayerAssembly')));
	assert error(dataNotRequireMiddle) 
		with log('Data Layer Assembly requires Middle Layer Assembly.(AssemblyInfrastructureConntector)');
}


query testNoProvidedDelegationConnectorToMiddleLayerAssemblies(system : System){
	var providedDelegationConnectors : Set(ProvidedDelegationConnector) := system.connectors__ComposedStructure->selectByType(ProvidedDelegationConnector);
    var noProvidedDelegationToMiddle : Boolean := providedDelegationConnectors->forAll(pdc|
    not(hasAppliedStereotype(pdc.assemblyContext_ProvidedDelegationConnector,'MiddleLayerAssembly')));
	assert error(noProvidedDelegationToMiddle) 
		with log('Provided Delegation Connector to Middle Layer Assembly.(OperationProvidedDelegationConnector)');
	var providedInfrastructureDelegationConnectors : Set(ProvidedInfrastructureDelegationConnector) := system.connectors__ComposedStructure->selectByType(ProvidedInfrastructureDelegationConnector);
   	noProvidedDelegationToMiddle := providedInfrastructureDelegationConnectors->forAll(pdc|
    not(hasAppliedStereotype(pdc.assemblyContext__ProvidedInfrastructureDelegationConnector,'MiddleLayerAssembly')));
	assert error(noProvidedDelegationToMiddle) 
		with log('Provided Delegation Connector to Middle Layer Assembly.(ProvidedInfrastructureDelegationConnector)');
}

query testNoProvidedDelegationConnectorToDataLayerAssemblies(system : System){
	var providedDelegationConnectors : Set(ProvidedDelegationConnector) := system.connectors__ComposedStructure->selectByType(ProvidedDelegationConnector);
    var noProvidedDelegationToData : Boolean := providedDelegationConnectors->forAll(pdc|
    not(hasAppliedStereotype(pdc.assemblyContext_ProvidedDelegationConnector,'DataLayerAssembly')));
	assert error(noProvidedDelegationToData) 
		with log('Provided Delegation Connector to Middle Layer Assembly.(OperationProvidedDelegationConnector)');
	var providedInfrastructureDelegationConnectors : Set(ProvidedInfrastructureDelegationConnector) := system.connectors__ComposedStructure->selectByType(ProvidedInfrastructureDelegationConnector);
    noProvidedDelegationToData := providedInfrastructureDelegationConnectors->forAll(pdc|
    not(hasAppliedStereotype(pdc.assemblyContext__ProvidedInfrastructureDelegationConnector,'DataLayerAssembly')));
	assert error(noProvidedDelegationToData) 
		with log('Provided Delegation Connector to Middle Layer Assembly.(ProvidedInfrastructureDelegationConnector)');
}

query testNoRequiredDelegationConnectorFromPresentationLayerAssemblies(system : System){
	var requiredDelegationConnectors : Set(RequiredDelegationConnector) := system.connectors__ComposedStructure->selectByType(RequiredDelegationConnector);
    var noRequiredDelegationFromPresentation : Boolean := requiredDelegationConnectors->forAll(rdc|
    not(hasAppliedStereotype(rdc.assemblyContext_RequiredDelegationConnector,'PresentationLayerAssembly')));
	assert error(noRequiredDelegationFromPresentation) 
		with log('Required Delegation Connector From Presentation Layer Assembly.');
}

query testNoRequiredDelegationConnectorFromMiddleLayerAssemblies(system : System){
	var requiredDelegationConnectors : Set(RequiredDelegationConnector) := system.connectors__ComposedStructure->selectByType(RequiredDelegationConnector);
    var noRequiredDelegationFromMiddle : Boolean := requiredDelegationConnectors->forAll(rdc|
    not(hasAppliedStereotype(rdc.assemblyContext_RequiredDelegationConnector,'MiddleLayerAssembly')));
	assert error(noRequiredDelegationFromMiddle) 
		with log('Required Delegation Connector From Middle Layer Assembly.');
}

query testPresentationLayerAssembliesAllocatedToPresentationTier(allocation : Allocation, assemblies : Set(AssemblyContext)){
	var presentationLayerAssemblies := assemblies->select(a|hasAppliedStereotype(a, 'PresentationLayerAssembly'))->asBag();
	var presentationLayerAllocations := allocation.allocationContexts_Allocation->select(ac|(presentationLayerAssemblies->includes(ac.assemblyContext_AllocationContext)));
	var allPresentationTier : Boolean := presentationLayerAllocations->forAll(ac|hasAppliedStereotype(ac.resourceContainer_AllocationContext,'PresentationTier'));
	
	assert error(allPresentationTier) 
		with log('Not all Presentaton Layer Assemblies are allocated to a Presentation Tier.');
}

query testMiddleLayerAssembliesAllocatedToMiddleTier(allocation : Allocation, assemblies : Set(AssemblyContext)){
	var middleLayerAssemblies := assemblies->select(a|hasAppliedStereotype(a, 'MiddleLayerAssembly'))->asBag();
	var middleLayerAllocations := allocation.allocationContexts_Allocation->select(ac|(middleLayerAssemblies->includes(ac.assemblyContext_AllocationContext)));
	var allMiddleTier : Boolean := middleLayerAllocations->forAll(ac|hasAppliedStereotype(ac.resourceContainer_AllocationContext,'OriginalResourceContainer'));
	
	assert error(allMiddleTier) 
		with log('Not all Middle Layer Assemblies are allocated to the Replicable Middle Tier.');
}

query testDataLayerAssembliesAllocatedToDataTier(allocation : Allocation, assemblies : Set(AssemblyContext)){
	var dataLayerAssemblies := assemblies->select(a|hasAppliedStereotype(a, 'DataLayerAssembly'))->asBag();
	var dataLayerAllocations := allocation.allocationContexts_Allocation->select(ac|(dataLayerAssemblies->includes(ac.assemblyContext_AllocationContext)));
	var allDataTier : Boolean := dataLayerAllocations->forAll(ac|hasAppliedStereotype(ac.resourceContainer_AllocationContext,'DataTier'));
	
	assert error(allDataTier) 
		with log('Not all Data Layer Assemblies are allocated to a Data Tier.');
}

query areEqualStringSets(stringSet1 : Bag(String), stringSet2 : Bag(String)):Boolean{
	var set1InSet2 : Boolean := stringSet2->includesAll(stringSet1);
	var set2InSet1 : Boolean := stringSet1->includesAll(stringSet2);
	var areEqual : Boolean := set1InSet2 and set2InSet1;
	return areEqual;
}