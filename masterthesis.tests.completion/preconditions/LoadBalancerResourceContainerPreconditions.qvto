import org.scaledl.architecturaltemplates.repositories.cloudscale.black.ProfilesLibrary;

modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype PCMComposition uses pcm::core::composition('http://palladiosimulator.org/PalladioComponentModel/5.1');
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1';
modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';

transformation LoadBalancerResourceContainerPreconditions(in allocationBeforeCompletion : PCM_ALLOC);

property oldAllocation : Allocation;

main() {
	log('------------Second Iteration------------');

	log('LoadBalancerResourceContainerPreconditions Test started');

	oldAllocation := allocationBeforeCompletion.rootObjects()![Allocation];
	var system : System := oldAllocation.system_Allocation;
	var resourceEnvironment : ResourceEnvironment := oldAllocation.targetResourceEnvironment_Allocation;
	var assemblyContexts : Set(AssemblyContext) := system.assemblyContexts__ComposedStructure;
	
	testSystemProfileApplied(system);
	testResourceEnvironmentProfileApplied(resourceEnvironment);
	testSystemIsLoadBalancerResourceContainerSystem(system);
	
	testSystemHasOnlyOneStaticLoadbalancedResourceContainer(resourceEnvironment);
	testNumberOfReplicasGreaterZero(resourceEnvironment);
	testStaticLoadbalancedResourceContainerBasicComponentAreStateless(oldAllocation);
	
	log('LoadBalancerResourceContainerPreconditions Test finished');
}

query testSystemProfileApplied(system : System){
	assert fatal(isProfileApplied(system.oclAsType(EObject),"StaticResourceContainerLoadbalancingProfile"))
		with log ("The System has no Load Balancer Resource Container Profile applied.");		
}

query testResourceEnvironmentProfileApplied(resourceEnvironment : ResourceEnvironment){
	assert fatal(isProfileApplied(resourceEnvironment.oclAsType(EObject),"StaticResourceContainerLoadbalancingProfile"))
		with log ("The resource environment has no Load Balancer Resource Container Profile applied.");
}

query testSystemIsLoadBalancerResourceContainerSystem(system : System){
	assert fatal(hasAppliedStereotype(system,"StaticResourceContainerLoadbalancingSystem")) 
		with log('The System is not a StaticResourceContainerLoadbalancingSystem.');
}

query testSystemHasOnlyOneStaticLoadbalancedResourceContainer(resourceEnvironment : ResourceEnvironment){
	var loadBalancedResContainers := resourceEnvironment.resourceContainer_ResourceEnvironment->select(r|hasAppliedStereotype(r,'StaticLoadbalancedResourceContainer'));
	var loadBalancedResContainersSize : Integer := loadBalancedResContainers->size();
	assert error(loadBalancedResContainersSize = 1) 
		with log('There is not exactly one Static Load Balanced Resource Container. Instead there are ' + loadBalancedResContainersSize.toString() + '.');
}

query testNumberOfReplicasGreaterZero(resourceEnvironment : ResourceEnvironment){
	var replicableResContainer := resourceEnvironment.resourceContainer_ResourceEnvironment->selectOne(r|hasAppliedStereotype(r,'StaticLoadbalancedResourceContainer'));
	if(replicableResContainer != null){
		var numberOfReplicas : Integer := getIntTaggedValue(replicableResContainer, "numberOfReplicas", "StaticLoadbalancedResourceContainer");
		assert error(numberOfReplicas>0) 
			with log('Number of Replicas is not greater 0.');
	}else{
		assert error(replicableResContainer != null) 
			with log('There is no replicable Resource Container, hence the number of replicas cannot be tested.');	
		};
}

query testStaticLoadbalancedResourceContainerBasicComponentAreStateless(allocation : Allocation){
	var allStateless : Boolean := allocation.allocationContexts_Allocation->select(ac|
									hasAppliedStereotype(ac.resourceContainer_AllocationContext,'StaticLoadbalancedResourceContainer'))->collect(ac|
									ac.assemblyContext_AllocationContext.encapsulatedComponent__AssemblyContext)->forAll(bc|
									hasAppliedStereotype(bc,'StatelessComponent'));
	assert error(allStateless) 
		with log('Not all Basic Components, which are allocated to the Static Load Balanced Resource Container, are stateless.');
}