import org.scaledl.architecturaltemplates.repositories.cloudscale.black.ProfilesLibrary;

modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype PCMComposition uses pcm::core::composition('http://palladiosimulator.org/PalladioComponentModel/5.1');
modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';

transformation LoadBalancerAssemblyContextPreconditions(in allocationBeforeCompletion : PCM_ALLOC);

property oldAllocation : Allocation;

main() {
	log('------------Second Iteration------------');

	log('LoadBalancerAssemblyContextPreconditions Test started');

	oldAllocation := allocationBeforeCompletion.rootObjects()![Allocation];
	var system : System := oldAllocation.system_Allocation;
	var assemblyContexts : Set(AssemblyContext) := system.assemblyContexts__ComposedStructure;
	
	testSystemProfileApplied(system);
	testSystemIsLoadBalancerAssemblyContextSystem(system);
	
	testSystemHasOnlyOneStaticLoadbalancedAssemblyContext(system);
	testNumberOfReplicasGreaterZero(system);
	testStaticLoadbalancedAssemblyContextBasicComponentIsStateless(assemblyContexts);
	
	log('LoadBalancerAssemblyContextPreconditions Test finished');
}

query testSystemProfileApplied(system : System){
	assert fatal(isProfileApplied(system.oclAsType(EObject),"StaticAssemblyContextLoadbalancingProfile"))
		with log ("The System has no Load Balancer Assembly Context Profile applied.");		
}

query testSystemIsLoadBalancerAssemblyContextSystem(system : System){
	assert fatal(hasAppliedStereotype(system,"StaticAssemblyContextLoadbalancingSystem")) 
		with log('The System is not a StaticAssemblyContextLoadbalancingSystem.');
}

query testSystemHasOnlyOneStaticLoadbalancedAssemblyContext(system : System){
	var staticLoadbalancedAssemblyContexts := system.assemblyContexts__ComposedStructure->select(a|hasAppliedStereotype(a,'StaticLoadbalancedAssemblyContext'));
	var staticLoadbalancedAssemblyContextsSize : Integer := staticLoadbalancedAssemblyContexts->size();
	assert error(staticLoadbalancedAssemblyContextsSize = 1) 
		with log('There is not exactly one Static Load Balanced Assembly Context. Instead there are ' + staticLoadbalancedAssemblyContextsSize.toString() + '.');
}

query testNumberOfReplicasGreaterZero(system : System){
	var staticLoadbalancedAssemblyContext := system.assemblyContexts__ComposedStructure->selectOne(a|hasAppliedStereotype(a,'StaticLoadbalancedAssemblyContext'));
	if(staticLoadbalancedAssemblyContext != null){
		var numberOfReplicas : Integer := getIntTaggedValue(staticLoadbalancedAssemblyContext, "numberOfReplicas", "StaticLoadbalancedAssemblyContext");
		assert error(numberOfReplicas>0) 
			with log('Number of Replicas is not greater 0.');
	}else{
		assert error(staticLoadbalancedAssemblyContext != null) 
			with log('There is no Static Load Balanced Assembly Context, hence the number of replicas cannot be tested.');		
	};
}

query testStaticLoadbalancedAssemblyContextBasicComponentIsStateless(assemblyContexts : Set(AssemblyContext)){
	var staticLoadbalancedAssemblyContext : AssemblyContext := assemblyContexts->selectOne(assembly|hasAppliedStereotype(assembly,'StaticLoadbalancedAssemblyContext'));
	if(staticLoadbalancedAssemblyContext != null){
		assert error(hasAppliedStereotype(staticLoadbalancedAssemblyContext.encapsulatedComponent__AssemblyContext,'StatelessComponent')) 
			with log('The Static Load Balanced Assembly Context Basic Component is not stateless.');
	}
	else {assert error(false) 
			with log('There is no Static Load Balanced Assembly Context. Hence the Basic Components cannot be tested whether they are stateless.');
	}
}