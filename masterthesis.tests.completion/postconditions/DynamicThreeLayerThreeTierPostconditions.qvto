import org.scaledl.architecturaltemplates.repositories.cloudscale.black.ProfilesLibrary;

modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype PCMComposition uses pcm::core::composition('http://palladiosimulator.org/PalladioComponentModel/5.1');
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.1';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.1';
modeltype PCMSEFF uses pcm::seff('http://palladiosimulator.org/PalladioComponentModel/SEFF/5.1');
modeltype PCM_COMPLETION uses 'http://palladiosimulator.org/AnalyzerFramework/Completions/1.0';

transformation DynamicThreeLayerThreeTierPostconditions(in allocationBeforeCompletion : PCM_ALLOC, in allocationAfterCompletion : PCM_ALLOC);
	
property oldResEnvironment : ResourceEnvironment;
property newResEnvironment : ResourceEnvironment;
property resourceContainerStereotype : String = "ReplicableMiddleTier";
property replicableResourceContainer : ResourceContainer;

main() {
	log('DynamicThreeLayerThreeTierPostconditions started.');
	
	var newAllocation := allocationAfterCompletion.rootObjects()![Allocation];
	var oldAllocation : Allocation := allocationBeforeCompletion.rootObjects()![Allocation];
	var newSystem : System := newAllocation.system_Allocation;
	var newAssemblyContexts : Set(AssemblyContext) := newSystem.assemblyContexts__ComposedStructure;
	var oldSystem : System := oldAllocation.system_Allocation;
	oldResEnvironment := oldAllocation.targetResourceEnvironment_Allocation;
	newResEnvironment := newAllocation.targetResourceEnvironment_Allocation;
	replicableResourceContainer := oldResEnvironment.resourceContainer_ResourceEnvironment->selectOne(resCon| hasAppliedStereotype(resCon, resourceContainerStereotype));
	
	testSystemHasAtLeastThreeAssemblies(newAssemblyContexts);
	testSystemHasAtLeastOnePresentationLayerAssembly(newAssemblyContexts);
	testSystemHasAtLeastOneMiddleLayerAssembly(newAssemblyContexts);
	testSystemHasAtLeastOneDataLayerAssembly(newAssemblyContexts);
	testMiddleLayerAssembliesNotRequirePresentationLayerAssembly(newSystem);
	testDataLayerAssembliesNotRequirePresentationLayerAssembly(newSystem);
	testPresentationLayerAssembliesNotRequireDataLayerAssembly(newSystem);
	testDataLayerAssembliesNotRequireMiddleLayerAssembly(newSystem);
	testNoProvidedDelegationConnectorToMiddleLayerAssemblies(newSystem);
	testNoProvidedDelegationConnectorToDataLayerAssemblies(newSystem);
	testNoRequiredDelegationConnectorFromPresentationLayerAssemblies(newSystem);
	testNoRequiredDelegationConnectorFromMiddleLayerAssemblies(newSystem);
	testReplicableMiddleTierBasicComponentAreStateless(oldAllocation);
	testPresentationLayerAssembliesAllocatedToPresentationTier(oldAllocation, newAssemblyContexts);
	testMiddleLayerAssembliesAllocatedToMiddleTier(oldAllocation, newAssemblyContexts);
	testDataLayerAssembliesAllocatedToDataTier(oldAllocation, newAssemblyContexts);
	
	testOriginalAndDuplicateResourceContainerEqualsNumberOfReplicas();
	testLoadbalancerResourceContainerExists();
	testNumberOfNewResourceContainer(oldSystem);
	testDuplicateResourceContainerConnectedWithOriginalLinkingResource();
	testLoadbalancerResourceContainerConnectedWithOriginalLinkingResource();
	testNewResContainerSpecificationsEqualReplicableResContainer();
	testLoadbalancers(newSystem, oldSystem);
	testForEachLoadbalancedAssemblyDuplicateExists(newSystem, oldSystem);
	testConnectorsToLoadbalancerOnly(oldSystem, newSystem);
	testDuplicateAssembliesAllocatedToDuplicateResourceContainer(newAllocation,oldAllocation);
	
	log('DynamicThreeLayerThreeTierPostconditions finished.');	
}

query testSystemHasAtLeastThreeAssemblies(assemblyContexts : Set(AssemblyContext)){
	assert error(assemblyContexts->size() >= 3) 
		with log('The System has <= 2 Assembly Contexts. At least 3 are needed.');
}

query testSystemHasAtLeastOnePresentationLayerAssembly(assemblyContexts : Set(AssemblyContext)){
	var presentationLayerAssemblies : Set(AssemblyContext) := assemblyContexts->select(assembly : AssemblyContext| hasAppliedStereotype(assembly,"PresentationLayerAssembly"));
	assert error(presentationLayerAssemblies->size() >= 1) 
		with log('The System has no Presentation Layer Assembly.');
}

query testSystemHasAtLeastOneMiddleLayerAssembly(assemblyContexts : Set(AssemblyContext)){
	var middleLayerAssemblies : Set(AssemblyContext) := assemblyContexts->select(assembly : AssemblyContext| hasAppliedStereotype(assembly,"MiddleLayerAssembly"));
	assert error(middleLayerAssemblies->size() >= 1) 
		with log('The System has no Middle Layer Assembly.');
}

query testSystemHasAtLeastOneDataLayerAssembly(assemblyContexts : Set(AssemblyContext)){
	var dataLayerAssemblies : Set(AssemblyContext) := assemblyContexts->select(assembly : AssemblyContext| hasAppliedStereotype(assembly,"DataLayerAssembly"));
	assert error(dataLayerAssemblies->size() >= 1) 
		with log('The System has no Data Layer Assembly.');
}

query testMiddleLayerAssembliesNotRequirePresentationLayerAssembly(system : System){
	var assemblyConnectors : Set(AssemblyConnector) := system.connectors__ComposedStructure->selectByType(AssemblyConnector);
	var middleNotRequirePresentation : Boolean := assemblyConnectors->forAll(ac : AssemblyConnector
		|not(hasAppliedStereotype(ac.providingAssemblyContext_AssemblyConnector,'PresentationLayerAssembly') 
		and ((hasAppliedStereotype(ac.requiringAssemblyContext_AssemblyConnector,'MiddleLayerAssembly')))));
	assert error(middleNotRequirePresentation) 
		with log('Middle Layer Assembly requires Presentation Layer Assembly.(AssemblyConntector)');	
	var assemblyInfrastructureConnectors : Set(AssemblyInfrastructureConnector) := system.connectors__ComposedStructure->selectByType(AssemblyInfrastructureConnector);
	 middleNotRequirePresentation := assemblyInfrastructureConnectors->forAll(ac : AssemblyInfrastructureConnector
		|not(hasAppliedStereotype(ac.providingAssemblyContext__AssemblyInfrastructureConnector,'PresentationLayerAssembly') 
		and ((hasAppliedStereotype(ac.requiringAssemblyContext__AssemblyInfrastructureConnector,'MiddleLayerAssembly')))));
	assert error(middleNotRequirePresentation) 
		with log('Middle Layer Assembly requires Presentation Layer Assembly.(AssemblyInfrastructureConntector)');	
}

query testDataLayerAssembliesNotRequirePresentationLayerAssembly(system : System){
	var assemblyConnectors : Set(AssemblyConnector) := system.connectors__ComposedStructure->selectByType(AssemblyConnector);
	var dataNotRequirePresentation : Boolean := assemblyConnectors->forAll(ac|not(hasAppliedStereotype(ac.providingAssemblyContext_AssemblyConnector,'PresentationLayerAssembly') 
	and (hasAppliedStereotype(ac.requiringAssemblyContext_AssemblyConnector,'DataLayerAssembly'))));
	assert error(dataNotRequirePresentation) 
		with log('Data Layer Assembly requires Presentation Layer Assembly.(AssemblyConntector)');
	var assemblyInfrastructureConnectors : Set(AssemblyInfrastructureConnector) := system.connectors__ComposedStructure->selectByType(AssemblyInfrastructureConnector);
	dataNotRequirePresentation := assemblyInfrastructureConnectors->forAll(ac|not(hasAppliedStereotype(ac.providingAssemblyContext__AssemblyInfrastructureConnector,'PresentationLayerAssembly') 
	and (hasAppliedStereotype(ac.requiringAssemblyContext__AssemblyInfrastructureConnector,'DataLayerAssembly'))));
	assert error(dataNotRequirePresentation) 
		with log('Data Layer Assembly requires Presentation Layer Assembly.(AssemblyInfrastructureConntector)');
}

query testPresentationLayerAssembliesNotRequireDataLayerAssembly(system : System){
	var assemblyConnectors : Set(AssemblyConnector) := system.connectors__ComposedStructure->selectByType(AssemblyConnector);
	var presentationNotRequireData : Boolean := assemblyConnectors->forAll(ac|
	not(hasAppliedStereotype(ac.requiringAssemblyContext_AssemblyConnector,'PresentationLayerAssembly') 
	and hasAppliedStereotype(ac.providingAssemblyContext_AssemblyConnector,'DataLayerAssembly')));
	assert error(presentationNotRequireData) 
		with log('Presentation Layer Assembly requires Data Layer Assembly.(AssemblyConntector)');
	var assemblyInfrastructureConnectors : Set(AssemblyInfrastructureConnector) := system.connectors__ComposedStructure->selectByType(AssemblyInfrastructureConnector);
	presentationNotRequireData := assemblyInfrastructureConnectors->forAll(ac|
	not(hasAppliedStereotype(ac.requiringAssemblyContext__AssemblyInfrastructureConnector,'PresentationLayerAssembly') 
	and hasAppliedStereotype(ac.providingAssemblyContext__AssemblyInfrastructureConnector,'DataLayerAssembly')));
	assert error(presentationNotRequireData) 
		with log('Presentation Layer Assembly requires Data Layer Assembly.(AssemblyInfrastructureConntector)');
}

query testDataLayerAssembliesNotRequireMiddleLayerAssembly(system : System){
	var assemblyConnectors : Set(AssemblyConnector) := system.connectors__ComposedStructure->selectByType(AssemblyConnector);
	var dataNotRequireMiddle : Boolean := assemblyConnectors->forAll(ac|
	not(hasAppliedStereotype(ac.requiringAssemblyContext_AssemblyConnector,'DataLayerAssembly') 
	and hasAppliedStereotype(ac.providingAssemblyContext_AssemblyConnector,'MiddleLayerAssembly')));
	assert error(dataNotRequireMiddle) 
		with log('Data Layer Assembly requires Middle Layer Assembly.(AssemblyConntector)');
	var assemblyInfrastructureConnectors : Set(AssemblyInfrastructureConnector) := system.connectors__ComposedStructure->selectByType(AssemblyInfrastructureConnector);
 	dataNotRequireMiddle := assemblyInfrastructureConnectors->forAll(ac|
	not(hasAppliedStereotype(ac.requiringAssemblyContext__AssemblyInfrastructureConnector,'DataLayerAssembly') 
	and hasAppliedStereotype(ac.providingAssemblyContext__AssemblyInfrastructureConnector,'MiddleLayerAssembly')));
	assert error(dataNotRequireMiddle) 
		with log('Data Layer Assembly requires Middle Layer Assembly.(AssemblyInfrastructureConntector)');
}


query testNoProvidedDelegationConnectorToMiddleLayerAssemblies(system : System){
	var providedDelegationConnectors : Set(ProvidedDelegationConnector) := system.connectors__ComposedStructure->selectByType(ProvidedDelegationConnector);
    var noProvidedDelegationToMiddle : Boolean := providedDelegationConnectors->forAll(pdc|
    not(hasAppliedStereotype(pdc.assemblyContext_ProvidedDelegationConnector,'MiddleLayerAssembly')));
	assert error(noProvidedDelegationToMiddle) 
		with log('Provided Delegation Connector to Middle Layer Assembly.(OperationProvidedDelegationConnector)');
	var providedInfrastructureDelegationConnectors : Set(ProvidedInfrastructureDelegationConnector) := system.connectors__ComposedStructure->selectByType(ProvidedInfrastructureDelegationConnector);
   	noProvidedDelegationToMiddle := providedInfrastructureDelegationConnectors->forAll(pdc|
    not(hasAppliedStereotype(pdc.assemblyContext__ProvidedInfrastructureDelegationConnector,'MiddleLayerAssembly')));
	assert error(noProvidedDelegationToMiddle) 
		with log('Provided Delegation Connector to Middle Layer Assembly.(ProvidedInfrastructureDelegationConnector)');
}

query testNoProvidedDelegationConnectorToDataLayerAssemblies(system : System){
	var providedDelegationConnectors : Set(ProvidedDelegationConnector) := system.connectors__ComposedStructure->selectByType(ProvidedDelegationConnector);
    var noProvidedDelegationToData : Boolean := providedDelegationConnectors->forAll(pdc|
    not(hasAppliedStereotype(pdc.assemblyContext_ProvidedDelegationConnector,'DataLayerAssembly')));
	assert error(noProvidedDelegationToData) 
		with log('Provided Delegation Connector to Middle Layer Assembly.(OperationProvidedDelegationConnector)');
	var providedInfrastructureDelegationConnectors : Set(ProvidedInfrastructureDelegationConnector) := system.connectors__ComposedStructure->selectByType(ProvidedInfrastructureDelegationConnector);
    noProvidedDelegationToData := providedInfrastructureDelegationConnectors->forAll(pdc|
    not(hasAppliedStereotype(pdc.assemblyContext__ProvidedInfrastructureDelegationConnector,'DataLayerAssembly')));
	assert error(noProvidedDelegationToData) 
		with log('Provided Delegation Connector to Middle Layer Assembly.(ProvidedInfrastructureDelegationConnector)');
}


query testNoRequiredDelegationConnectorFromPresentationLayerAssemblies(system : System){
	var requiredDelegationConnectors : Set(RequiredDelegationConnector) := system.connectors__ComposedStructure->selectByType(RequiredDelegationConnector);
    var noRequiredDelegationFromPresentation : Boolean := requiredDelegationConnectors->forAll(rdc|
    not(hasAppliedStereotype(rdc.assemblyContext_RequiredDelegationConnector,'PresentationLayerAssembly')));
	assert error(noRequiredDelegationFromPresentation) 
		with log('Required Delegation Connector From Presentation Layer Assembly.');
}

query testNoRequiredDelegationConnectorFromMiddleLayerAssemblies(system : System){
	var requiredDelegationConnectors : Set(RequiredDelegationConnector) := system.connectors__ComposedStructure->selectByType(RequiredDelegationConnector);
    var noRequiredDelegationFromMiddle : Boolean := requiredDelegationConnectors->forAll(rdc|
    not(hasAppliedStereotype(rdc.assemblyContext_RequiredDelegationConnector,'MiddleLayerAssembly')));
	assert error(noRequiredDelegationFromMiddle) 
		with log('Required Delegation Connector From Middle Layer Assembly.');
}

query testReplicableMiddleTierBasicComponentAreStateless(allocation : Allocation){
	var allStateless : Boolean := allocation.allocationContexts_Allocation->select(ac|
									hasAppliedStereotype(ac.resourceContainer_AllocationContext,'ReplicableMiddleTier'))->collect(ac|
									ac.assemblyContext_AllocationContext.encapsulatedComponent__AssemblyContext)->forAll(bc|
									hasAppliedStereotype(bc,'StatelessComponent'));
	assert error(allStateless) 
		with log('Not all Basic Components, which are allocated to the Replicable Middle Tier Resource Container, are stateless.');
}

query testPresentationLayerAssembliesAllocatedToPresentationTier(allocation : Allocation, assemblies : Set(AssemblyContext)){
	var presentationLayerAssemblies := assemblies->select(a|hasAppliedStereotype(a, 'PresentationLayerAssembly'))->asBag();
	var presentationLayerAllocations := allocation.allocationContexts_Allocation->select(ac|(presentationLayerAssemblies->includes(ac.assemblyContext_AllocationContext)));
	var allPresentationTier : Boolean := presentationLayerAllocations->forAll(ac|hasAppliedStereotype(ac.resourceContainer_AllocationContext,'PresentationTier'));
	
	assert error(allPresentationTier) 
		with log('Not all Presentaton Layer Assemblies are allocated to a Presentation Tier.');
}

query testMiddleLayerAssembliesAllocatedToMiddleTier(allocation : Allocation, assemblies : Set(AssemblyContext)){
	var middleLayerAssemblies := assemblies->select(a|hasAppliedStereotype(a, 'MiddleLayerAssembly'))->asBag();
	var middleLayerAllocations := allocation.allocationContexts_Allocation->select(ac|(middleLayerAssemblies->includes(ac.assemblyContext_AllocationContext)));
	var allMiddleTier : Boolean := middleLayerAllocations->forAll(ac|hasAppliedStereotype(ac.resourceContainer_AllocationContext,'OriginalResourceContainer'));
	
	assert error(allMiddleTier) 
		with log('Not all Middle Layer Assemblies are allocated to the Replicable Middle Tier.');
}

query testDataLayerAssembliesAllocatedToDataTier(allocation : Allocation, assemblies : Set(AssemblyContext)){
	var dataLayerAssemblies := assemblies->select(a|hasAppliedStereotype(a, 'DataLayerAssembly'))->asBag();
	var dataLayerAllocations := allocation.allocationContexts_Allocation->select(ac|(dataLayerAssemblies->includes(ac.assemblyContext_AllocationContext)));
	var allDataTier : Boolean := dataLayerAllocations->forAll(ac|hasAppliedStereotype(ac.resourceContainer_AllocationContext,'DataTier'));
	
	assert error(allDataTier) 
		with log('Not all Data Layer Assemblies are allocated to a Data Tier.');
}

/**
* Tests whether the original and duplicates number of resource container equals the predefined number of replicas
**/
query testOriginalAndDuplicateResourceContainerEqualsNumberOfReplicas(){
	var numberOfReplicas : Integer := getIntTaggedValue(replicableResourceContainer,"numberOfReplicas",resourceContainerStereotype);
	var duplicateResourceContainer : Set(ResourceContainer) := getStereotypedResourceContainersAferCompletion("DuplicateResourceContainer");
	var stereotypedResContainerSize : Integer := duplicateResourceContainer->size() + 1;
	assert error (stereotypedResContainerSize = numberOfReplicas) 
		with log('The number of the replicable resource container and its duplicates('+stereotypedResContainerSize.toString()+') 
					does not equal the expected number of replicas('+numberOfReplicas.toString()+')');
}

/**
* Tests whether exactly one Loadbalancer Resource Container exists
**/
query testLoadbalancerResourceContainerExists(){
	var loadbalancerResourceContainer : Set(ResourceContainer) := newResEnvironment.resourceContainer_ResourceEnvironment->select(resCon|hasAppliedStereotype(resCon,"LoadbalancerResourceContainer"));
		assert error(loadbalancerResourceContainer->size()=1)
		with log('The number of the loadbalancer resource container ('+loadbalancerResourceContainer->size().toString()+') 
					does not equal the expected number of one Loadbalancer Resource Container');
}

/**
* Tests whether the resource container of the loadbalancers (=1) and duplicates(numberOfReplicas-1) are newly created and conforms to the expected number 
**/
query testNumberOfNewResourceContainer(oldSystem:System){
	var oldResContainer : Set(ResourceContainer) := getOldResourceContainer();
	var newResContainer : Set(ResourceContainer) := getNewResourceContainer();
	var newlyCreatedResourceContainer : Set(ResourceContainer) := newResContainer->select(resourceContainer : ResourceContainer | oldResContainer.id->excludes(resourceContainer.id));
	var newlyCreatedResContainerSize : Integer := newlyCreatedResourceContainer->size();
	
	var numberOfReplicas : Integer := getIntTaggedValue(replicableResourceContainer,"numberOfReplicas", resourceContainerStereotype);
	assert error (numberOfReplicas = newlyCreatedResContainerSize) 
		with log('The number of newly created resource container ('+newlyCreatedResContainerSize.toString()+') 
					does not equal the expected number of newly created resource container ('+numberOfReplicas.toString()+')');
}

/**
* Tests whether the resource container of the duplicates are connected with the same linking resources as the original resource container
**/
query testDuplicateResourceContainerConnectedWithOriginalLinkingResource(){
	var originalResourceContainer : ResourceContainer := getStereotypedResourceContainerAfterCompletion("OriginalResourceContainer");
	var originalLinkingResources : Set(LinkingResource) := getLinkingResourcesFromResourceContainerAfterCompletion(originalResourceContainer);
	var duplicateResourceContainer : Set(ResourceContainer) := getStereotypedResourceContainersAferCompletion("DuplicateResourceContainer");	
	var notConnectedResContainer : Set(ResourceContainer);
	var originalLinkingResourceContainer : Set(ResourceContainer);
	originalLinkingResources->forEach(linkingResource){
		originalLinkingResourceContainer := linkingResource.connectedResourceContainers_LinkingResource;
		notConnectedResContainer := duplicateResourceContainer->select(duplicateResContainer : ResourceContainer| originalLinkingResourceContainer->excludes(duplicateResContainer));
		var delim : String := "";
		assert error(notConnectedResContainer->isEmpty())
			with log('The duplicate resource container ['+notConnectedResContainer->forEach(resContainer){delim+resContainer.id; delim :=";";}
					+'] are not connected with the replicable linking resource '+linkingResource.id);
	};
}

/**
* Tests whether the resource container of the loadbalancer is connected with the same linking resources as the original resource container
**/
query testLoadbalancerResourceContainerConnectedWithOriginalLinkingResource(){
	var loadbalancerResourceContainer : ResourceContainer:= getStereotypedResourceContainerAfterCompletion("LoadbalancerResourceContainer");
	var originalResourceContainer : ResourceContainer := getStereotypedResourceContainerAfterCompletion("OriginalResourceContainer");
	var originalLinkingResources : Set(LinkingResource) := getLinkingResourcesFromResourceContainerAfterCompletion(originalResourceContainer);
	var connected : Boolean;
	var originalLinkingResourceContainer : Set(ResourceContainer);
	originalLinkingResources->forEach(linkingResource){
		originalLinkingResourceContainer := linkingResource.connectedResourceContainers_LinkingResource;
		connected := originalLinkingResourceContainer->includes(loadbalancerResourceContainer);
		assert error(connected)
			with log('The Loadbalancer Resource Container '+ loadbalancerResourceContainer.id + ' is not connected with the Linking Resource ' + linkingResource.id+ '.');
	};
}

/**
* Tests whether the newly created resource container specifications conforms to the original resource container specifications
**/
query testNewResContainerSpecificationsEqualReplicableResContainer(){
	var originalResourceContainer : ResourceContainer := getStereotypedResourceContainerAfterCompletion("OriginalResourceContainer");
	var originalResourceContainerSpecifications : Set(ProcessingResourceSpecification) := originalResourceContainer.activeResourceSpecifications_ResourceContainer;
	var newResourceContainer : Set(ResourceContainer) := getNewResourceContainer();
	var oldResourceContainer : Set(ResourceContainer) := getOldResourceContainer();
	var newlyCreatedResourceContainer : Set(ResourceContainer) := newResourceContainer->select(resourceContainer : ResourceContainer | oldResourceContainer.id->excludes(resourceContainer.id));
	var newlyCreatedResContainerSpecifications : Set(ProcessingResourceSpecification);
	newlyCreatedResourceContainer->forEach(newlyCreatedResContainer){
		newlyCreatedResContainerSpecifications := newlyCreatedResContainer.activeResourceSpecifications_ResourceContainer;
		assert error(newlyCreatedResContainerSpecifications.MTTR = originalResourceContainerSpecifications.MTTR)
			with log('The MTTR of the newly created resource container '+ newlyCreatedResContainer.id + ' does not conform to the expected value of the original resource container ' +originalResourceContainer.id);
		assert error(newlyCreatedResContainerSpecifications.MTTF = originalResourceContainerSpecifications.MTTF)
			with log('The MTTF of the newly created resource container '+ newlyCreatedResContainer.id + ' does not conform to the expected value of the original resource container ' +originalResourceContainer.id);
		assert error(newlyCreatedResContainerSpecifications.schedulingPolicy = originalResourceContainerSpecifications.schedulingPolicy)
			with log('The scheduling policy of the newly created resource container '+ newlyCreatedResContainer.id + ' does not conform to the expected value of the original resource container ' +originalResourceContainer.id);
		assert error(newlyCreatedResContainerSpecifications.activeResourceType_ActiveResourceSpecification = originalResourceContainerSpecifications.activeResourceType_ActiveResourceSpecification)
			with log('The active resource type of the newly created resource container '+ newlyCreatedResContainer.id + ' does not conform to the expected value of the original resource container ' +originalResourceContainer.id);
		assert error(newlyCreatedResContainerSpecifications.processingRate_ProcessingResourceSpecification.specification = originalResourceContainerSpecifications.processingRate_ProcessingResourceSpecification.specification)
			with log('The processing rate of the newly created resource container '+ newlyCreatedResContainer.id + ' does not conform to the expected value of the original resource container ' +originalResourceContainer.id);
		assert error(newlyCreatedResContainerSpecifications.numberOfReplicas = originalResourceContainerSpecifications.numberOfReplicas)
			with log('The number of replicas of the newly created resource container '+ newlyCreatedResContainer.id + ' does not conform to the expected value of the original resource container ' +originalResourceContainer.id);
		var newNestedResCon : Set(ResourceContainer) := newlyCreatedResContainer.nestedResourceContainers__ResourceContainer;
		var oldNestedResCon : Set(ResourceContainer) := originalResourceContainer.nestedResourceContainers__ResourceContainer;
		if(not(newNestedResCon->isEmpty()) and oldNestedResCon->isEmpty()){
			testNewResContainerSpecificationsEqualReplicableResContainerRecursively(newNestedResCon,oldNestedResCon);
		};
		
		assert error(not(not(oldNestedResCon->isEmpty()) and newNestedResCon->isEmpty()))
				with log('Nested Resource Containers are not duplicated.')
	
	};
}

query testNewResContainerSpecificationsEqualReplicableResContainerRecursively(newNestedResCon : Set(ResourceContainer), oldNestedResCon : Set(ResourceContainer)){
	
}


query testLoadbalancers(newSystem : System, oldSystem : System){
 var loadbalancerAssemblies : Set (AssemblyContext) := newSystem.assemblyContexts__ComposedStructure->select(assembly|hasAppliedStereotype(assembly, "LoadbalancerAssemblyContext"));
 var originalAssemblies : Set(AssemblyContext) := newSystem.assemblyContexts__ComposedStructure->select(assembly|hasAppliedStereotype(assembly, "OriginalAssemblyContext"));
 
 originalAssemblies->forEach(originalAssembly){
 	assert error(hasAppliedStereotype(originalAssembly,"OriginalAssemblyContext"))
			with log('The assembly context '+ originalAssembly.id + 
				' has not applied the OriginalAssemblyContext Stereotype. Hence, it was not loadbalanced.');
				
	var originalAssemblyLoadbalancers : Set(AssemblyContext) := loadbalancerAssemblies->select(assembly : AssemblyContext | getStringTaggedValue(assembly,"originalAssemblyContext", "LoadbalancerAssemblyContext") = originalAssembly.id);
	var loadbalancerSize : Integer := originalAssemblyLoadbalancers->size();
	var originalAssemblyProvidedRoles : Integer := originalAssembly.encapsulatedComponent__AssemblyContext.providedRoles_InterfaceProvidingEntity->size();
	assert error(loadbalancerSize = originalAssemblyProvidedRoles)
		with log('The assembly context '+ originalAssembly.id + 
				' has not one loadbalancer for each provided role. Instead of '+originalAssemblyProvidedRoles.toString()+', it has '+ loadbalancerSize.toString());
		
		testLoadbalancerProvidedRoles(originalAssemblyLoadbalancers,originalAssembly);
				
		originalAssemblyLoadbalancers->forEach(loadbalancerAssembly){
			testLoadbalancerRequiredRoles(loadbalancerAssembly);
			testLoadbalancersSEFF(loadbalancerAssembly);
			testLoadbalancerIsConnectedWithReplicableAssembly(loadbalancerAssembly,originalAssembly);
		};
  };
}

query testForEachLoadbalancedAssemblyDuplicateExists(newSystem : System, oldSystem : System){
	
	var originalAssemblies : Set(AssemblyContext) := newSystem.assemblyContexts__ComposedStructure->select(assembly|hasAppliedStereotype(assembly, "OriginalAssemblyContext"));
	
	var expectedNumberOfDuplicates : Integer := getIntTaggedValue(replicableResourceContainer,"numberOfReplicas",resourceContainerStereotype)-1;
	var allDuplicateAssemblies : Set(AssemblyContext) :=  newSystem.assemblyContexts__ComposedStructure->select(assembly : AssemblyContext | hasAppliedStereotype(assembly, "DuplicateAssemblyContext"));
	var duplicateAssemblies : Set(AssemblyContext);
	var duplicateAssembliesSize : Integer;
	originalAssemblies->forEach(originalAssembly){
		duplicateAssemblies := allDuplicateAssemblies->select(assembly : AssemblyContext | getStringTaggedValue(assembly,"originalAssemblyContext","DuplicateAssemblyContext") = originalAssembly.id);
		duplicateAssembliesSize := duplicateAssemblies->size();
		assert error(duplicateAssembliesSize = expectedNumberOfDuplicates)
			with log('The number of of duplicates of the replicable assembly context '+ originalAssembly.id + 
				' is ' +duplicateAssembliesSize.toString()+ ' instead of '+ expectedNumberOfDuplicates.toString());
		testDuplicateAssembliesContainReplicableRepositoryComponent(originalAssembly, duplicateAssemblies);
		testEachLoadbalancerIsConnectedWithDuplicates(originalAssembly, duplicateAssemblies, newSystem);
	};	
}

query testDuplicateAssembliesContainReplicableRepositoryComponent(replicableAssemblyContext : AssemblyContext, duplicateAssemblies : Set(AssemblyContext)){
	duplicateAssemblies->forEach(duplicateAssembly){
	assert error(duplicateAssembly.encapsulatedComponent__AssemblyContext.id = replicableAssemblyContext.encapsulatedComponent__AssemblyContext.id)
			with log('The duplicate of the replicable assembly context '+ duplicateAssembly.id + 
				' does not encapsulate the repository component ' + replicableAssemblyContext.encapsulatedComponent__AssemblyContext.id + ' of the replicable assembly context '+ replicableAssemblyContext.id);		
	};
}


query testEachLoadbalancerIsConnectedWithDuplicates(originalAssembly : AssemblyContext, duplicateAssemblies : Set(AssemblyContext), newSystem : System){
	var loadbalancerAssemblies : Set(AssemblyContext) := newSystem.assemblyContexts__ComposedStructure->select(assembly| hasAppliedStereotype(assembly, "LoadbalancerAssemblyContext"));
	var originalAssemblyLoadbalancers : Set(AssemblyContext) := loadbalancerAssemblies->select(assembly : AssemblyContext | getStringTaggedValue(assembly,"originalAssemblyContext", "LoadbalancerAssemblyContext") = originalAssembly.id);
	var assemblyConnectors : Set(AssemblyConnector) := newSystem.connectors__ComposedStructure->selectByType(AssemblyConnector);
	var loadbalancerDuplicateConnectors : Integer;
	var duplicateAssembliesSize : Integer := duplicateAssemblies->size();
	originalAssemblyLoadbalancers->forEach(originalAssemblyLoadbalancer){
		duplicateAssemblies->forEach(duplicateAssembly){
		loadbalancerDuplicateConnectors := assemblyConnectors->select(assemblyConnector : AssemblyConnector| 
																duplicateAssemblies.id->includes(assemblyConnector.providingAssemblyContext_AssemblyConnector.id) and originalAssemblyLoadbalancer.id = assemblyConnector.requiringAssemblyContext_AssemblyConnector.id)->size();	
		assert error(loadbalancerDuplicateConnectors = duplicateAssembliesSize)
			with log('The number of connectors between the loadbalancer assembly'+ originalAssemblyLoadbalancer.id + 
				' of the replicable assembly ' +originalAssembly.id+ ' is '+loadbalancerDuplicateConnectors.toString()+' instead of '+ duplicateAssembliesSize.toString());
	};
};
}

query testLoadbalancerIsConnectedWithReplicableAssembly(loadbalancerAssembly : AssemblyContext,replicableAssembly : AssemblyContext){ 

	var assemblyConnectors : Set(AssemblyConnector) := replicableAssembly.parentStructure__AssemblyContext.connectors__ComposedStructure->selectByType(AssemblyConnector);
	var loadbalancerReplicableConnectors : Set(AssemblyConnector) := assemblyConnectors->select(assemblyConnector : AssemblyConnector| 
																assemblyConnector.providingAssemblyContext_AssemblyConnector.id = replicableAssembly.id and loadbalancerAssembly.id = assemblyConnector.requiringAssemblyContext_AssemblyConnector.id);	
	var loadbalancerReplicableConnectorsSize : Integer := loadbalancerReplicableConnectors->size();
															
	assert error(loadbalancerReplicableConnectorsSize = 1)
			with log('The number of connectors between the loadbalancer assembly'+ loadbalancerAssembly.id + 
				' and the replicable assembly ' +replicableAssembly.id+ ' is '+loadbalancerReplicableConnectorsSize.toString()+' instead of 1.');	
}

query testConnectorsToLoadbalancerOnly(oldSystem : System, newSystem : System){
	var newSystemConnectors : Set(Connector) := newSystem.connectors__ComposedStructure;
	var replicableConnectors : Set(Connector) := getAllConnectorsToAllocatedAssemblies(oldSystem, replicableResourceContainer);
	var targetReplicableAssemblyContext : AssemblyContext;
	var loadbalancerAssemblyContextID : String;
	var loadbalancerAssemblyContext : AssemblyContext;
	var originalTargetAssemblyContext : AssemblyContext;
	replicableConnectors->forEach(replicableConnector){
		if(replicableConnector.oclIsTypeOf(AssemblyConnector)){
			var replicableAssemblyConnector : AssemblyConnector := replicableConnector.oclAsType(AssemblyConnector);
			var originalAssemblyConnector : AssemblyConnector := newSystemConnectors->selectOne(assemblyConnector : AssemblyConnector | assemblyConnector.id = replicableAssemblyConnector.id).oclAsType(AssemblyConnector); 
			originalTargetAssemblyContext := getProvidingAssemblyContext(originalAssemblyConnector);
			targetReplicableAssemblyContext := getProvidingAssemblyContext(replicableAssemblyConnector);
		}
		else if(replicableConnector.oclIsTypeOf(ProvidedDelegationConnector)){
			var replicableProvidedDelegationConnector : ProvidedDelegationConnector := replicableConnector.oclAsType(ProvidedDelegationConnector);	
			var originalProvidedDelegationConnector : ProvidedDelegationConnector := newSystemConnectors->selectOne(providedDelegationConnector : ProvidedDelegationConnector | providedDelegationConnector.id = replicableProvidedDelegationConnector.id).oclAsType(ProvidedDelegationConnector);
			originalTargetAssemblyContext := getProvidingAssemblyContext(originalProvidedDelegationConnector);
			targetReplicableAssemblyContext := getProvidingAssemblyContext(replicableProvidedDelegationConnector);
		};
		if(hasAppliedStereotype(targetReplicableAssemblyContext,"OriginalAssemblyContext")){
			loadbalancerAssemblyContextID := getStringTaggedValue(targetReplicableAssemblyContext,"loadbalancerAssemblyContext","OriginalAssemblyContext"); 
				assert error(originalTargetAssemblyContext.id = loadbalancerAssemblyContextID)
				with log('The target assembly context of the assembly connector'+ replicableConnector.id + 
						' is not the loadbalancer ' +loadbalancerAssemblyContextID+ '. Instead the target assembly context is '+originalTargetAssemblyContext.id+'.');
			};
	};
}

query testLoadbalancerProvidedRoles(loadbalancerAssemblies : Set(AssemblyContext), replicableAssemblyContext : AssemblyContext){
	var replicableRepositoryComponent : RepositoryComponent := replicableAssemblyContext.encapsulatedComponent__AssemblyContext;
	var replicableProvidedRoles : Set(ProvidedRole) := replicableRepositoryComponent.providedRoles_InterfaceProvidingEntity;
	var loadbalancerRepositoryComponents : Bag(RepositoryComponent) := loadbalancerAssemblies.encapsulatedComponent__AssemblyContext;
	var operationProvidedRoleComponent : Bag(RepositoryComponent);
	replicableProvidedRoles->forEach(providedRole){
		if(providedRole.oclIsTypeOf(OperationProvidedRole)){
			var replicableOperationProvidedRole : OperationProvidedRole := providedRole.oclAsType(OperationProvidedRole);
			operationProvidedRoleComponent := loadbalancerRepositoryComponents->select(component| component.providedRoles_InterfaceProvidingEntity->selectByType(OperationProvidedRole).providedInterface__OperationProvidedRole.id ->includes(replicableOperationProvidedRole.providedInterface__OperationProvidedRole.id));
			assert error(not(operationProvidedRoleComponent->isEmpty()))
				with log('The provided role '+ replicableOperationProvidedRole.id + 
						' is not loadbalanced.');
			assert error(not(operationProvidedRoleComponent->size()>1))
				with log('The provided role '+ replicableOperationProvidedRole.id + 
						' is loadbalanced more than 1.');
		};
	};
}

query testLoadbalancerRequiredRoles(loadbalancerAssembly : AssemblyContext){
	var loadbalancerRepositoryComponent : RepositoryComponent := loadbalancerAssembly.encapsulatedComponent__AssemblyContext;
	var loadbalancerProvidedRoles : Set(ProvidedRole) := loadbalancerRepositoryComponent.providedRoles_InterfaceProvidingEntity;
	var loadbalancerRequiredRoles : Set(RequiredRole) := loadbalancerRepositoryComponent.requiredRoles_InterfaceRequiringEntity;
	var replicableResourceContainer : ResourceContainer := getStereotypedResourceContainerBeforeCompletion(resourceContainerStereotype);
	var numberOfReplicas : Integer := getIntTaggedValue(replicableResourceContainer,"numberOfReplicas",resourceContainerStereotype);
	var matchingInterfaces : Boolean;
	loadbalancerProvidedRoles->forEach(loadbalancerProvidedRole){
		if(loadbalancerProvidedRole.oclIsTypeOf(OperationProvidedRole)){
			var loadbalancerOperationProvidedRole : OperationProvidedRole := loadbalancerProvidedRole.oclAsType(OperationProvidedRole);
			var loadbalancerOperationRequiredRoles : Set(OperationRequiredRole) := loadbalancerRequiredRoles->selectByType(OperationRequiredRole);
			matchingInterfaces := loadbalancerOperationRequiredRoles->forAll(requiredRole| requiredRole.requiredInterface__OperationRequiredRole.id = loadbalancerOperationProvidedRole.providedInterface__OperationProvidedRole.id);
			assert error(matchingInterfaces)
				with log('The loadbalancer repository component '+loadbalancerRepositoryComponent.id+' requires another interface than interface'+ loadbalancerOperationProvidedRole.providedInterface__OperationProvidedRole.toString() + 
						'. This is not allowed as the loadbalancer provide and require the same interface. They just pass the requests for one provided role.');
		};
	};
}

query testLoadbalancersSEFF(loadbalancerAssemly : AssemblyContext){
	var loadbalancerRepositoryComponent : RepositoryComponent := loadbalancerAssemly.encapsulatedComponent__AssemblyContext;
	var loadbalancerOperationRequiredRoles := loadbalancerRepositoryComponent.requiredRoles_InterfaceRequiringEntity->selectByType(OperationRequiredRole);
	var numberOfReplicas : Integer := getIntTaggedValue(replicableResourceContainer,"numberOfReplicas",resourceContainerStereotype);
	var resourceDemandingSeffs : Bag(ResourceDemandingSEFF) := loadbalancerRepositoryComponent.oclAsType(BasicComponent).serviceEffectSpecifications__BasicComponent.oclAsType(ResourceDemandingSEFF);
	var branchActions : Set(BranchAction);
	var branches : Bag(AbstractBranchTransition);
	resourceDemandingSeffs->forEach(resourceDemandingSeff){
		branchActions := resourceDemandingSeff.steps_Behaviour->selectByType(BranchAction);
		branches := branchActions.branches_Branch;
		assert error(branches->size()=numberOfReplicas) 
			with log('The loadbalancers Seff does not call '+numberOfReplicas.toString()+' required role');
		var resourceDemandingBehaviors : Set(ResourceDemandingBehaviour);
		var delegatingExternalCallAction : Set(DelegatingExternalCallAction);
		branches->forEach(branch){
			resourceDemandingBehaviors := branch.branchBehaviour_BranchTransition->selectByType(ResourceDemandingBehaviour);
			resourceDemandingBehaviors->forEach(resourceDemandingBehavior){
							delegatingExternalCallAction += resourceDemandingBehavior.steps_Behaviour->selectByType(DelegatingExternalCallAction);	
			};	
		};
	var delegatingExternalCallActionInterfaces := delegatingExternalCallAction->collect(action| action.role_ExternalService.requiredInterface__OperationRequiredRole.id);
	assert error(delegatingExternalCallActionInterfaces->forAll(interface1,interface2| interface1 = interface2))
		with log('The resource demanding SEFF '+resourceDemandingSeff.id+' does request another interface');
	
	var operationRequiredRolesOfDelegatingExternalCallActionInterface : Set(OperationRequiredRole) := loadbalancerOperationRequiredRoles->select(operationRequiredRole | operationRequiredRole.requiredInterface__OperationRequiredRole.id = delegatingExternalCallActionInterfaces->any(true));
	var operationRequiredRolesMatch := operationRequiredRolesOfDelegatingExternalCallActionInterface-(delegatingExternalCallAction.role_ExternalService->asSet());
	var delim : String := "";
	assert error(operationRequiredRolesMatch->isEmpty()) 
		with log('The resource demanding SEFF '+resourceDemandingSeff.id+' does not request the required roles:[ '
				+operationRequiredRolesMatch->forEach(operationRequiredRole){delim+operationRequiredRole.id; delim :=";";}+']');
	};
}

query testDuplicateAssembliesAllocatedToDuplicateResourceContainer(newAllocation : Allocation,oldAllocation:Allocation){
	var duplicateResourceContainer : Set(ResourceContainer) := getStereotypedResourceContainersAferCompletion("DuplicateResourceContainer");
	var duplicateAssemblyContexts : Set(AssemblyContext) := newAllocation.system_Allocation.assemblyContexts__ComposedStructure->select(assembly| hasAppliedStereotype(assembly, "DuplicateAssemblyContext"));
	duplicateAssemblyContexts->forEach(duplicateAssembly){
		var duplicateAllocationContexts : Set(AllocationContext);
		var duplicateAllocationContext : AllocationContext;
		duplicateAllocationContext := getAllocationContextFromAssemblyContextAfterCompletion(duplicateAssembly, newAllocation);
		
		assert error(not(duplicateAllocationContext->size() =0)) 
				with log('The duplicate assembly context '+duplicateAssembly.id+' is not allocated to a resource container');
		assert error(not(duplicateAllocationContext->size() >1)) 
				with log('The duplicate assembly context '+duplicateAssembly.id+' is allocated to more than one resource container');		
		duplicateAllocationContexts += duplicateAllocationContext;
		
		if(duplicateAllocationContexts->size()>1){
			assert error(duplicateAllocationContexts->forAll(a1,a2| a1.resourceContainer_AllocationContext.id != a2.resourceContainer_AllocationContext.id))
					with log('Not all duplicated assemblies of the replicable assembly context '+getStringTaggedValue(duplicateAssembly, "originalAssemblyContext", "DuplicateAssemblyContext")+' are allocated to a different duplicated resource container');
		};
	};
}


/**
* Returns the Allocation Context from the given Assembly Context after Completion
**/
query getAllocationContextFromAssemblyContextAfterCompletion(assemblyContext : AssemblyContext,newAllocation : Allocation):AllocationContext{
	return newAllocation.allocationContexts_Allocation->selectOne(allocationContext : AllocationContext | allocationContext.assemblyContext_AllocationContext = assemblyContext);
}

/**
* Returns the Assembly Contexts allocated to the given Resource Containers
**/
query getAssemblyContextsFromResourceContainer(resourceContainer : Set(ResourceContainer), allocation:Allocation):Bag(AssemblyContext){
	var allocationContextsWithResContainer : Set(AllocationContext) := allocation.allocationContexts_Allocation->select(allocationContext : AllocationContext|
																		resourceContainer->includes(allocationContext.resourceContainer_AllocationContext));
	var allocationContextsAssemblies : Bag(AssemblyContext) := allocationContextsWithResContainer->collect(allocationContext|allocationContext.assemblyContext_AllocationContext);
	return allocationContextsAssemblies;
	
}

/**
* Returns the Assembly Contexts allocated to the given Resource Container
**/
query getAssemblyContextsFromResourceContainer(resourceContainer : ResourceContainer, allocation:Allocation):Bag(AssemblyContext){
	var allocationContextsWithResContainer : Set(AllocationContext) := allocation.allocationContexts_Allocation->select(allocationContext : AllocationContext|
																		allocationContext.resourceContainer_AllocationContext.id = resourceContainer.id);
	var allocationContextsAssemblies : Bag(AssemblyContext) := allocationContextsWithResContainer->collect(allocationContext|allocationContext.assemblyContext_AllocationContext);
	return allocationContextsAssemblies;
	
}

/**
* Returns the Resource Container with the given Stereotype after Completion
**/
query getStereotypedResourceContainerAfterCompletion(stereotypeName : String):ResourceContainer{
	return newResEnvironment.resourceContainer_ResourceEnvironment->selectOne(resourceContainer : ResourceContainer | hasAppliedStereotype(resourceContainer,stereotypeName));
}

/**
* Returns a set of Resource Container with the given Stereotype after Completion
**/
query getStereotypedResourceContainersAferCompletion(stereotypeName : String):Set(ResourceContainer){
	return newResEnvironment.resourceContainer_ResourceEnvironment->select(resourceContainer : ResourceContainer| hasAppliedStereotype(resourceContainer,stereotypeName));
}

/**
* Returns the Resource Container with the given Stereotype before Completion
**/
query getStereotypedResourceContainerBeforeCompletion(stereotypeName : String ):ResourceContainer{
	return oldResEnvironment.resourceContainer_ResourceEnvironment->selectOne(resourceContainer : ResourceContainer | hasAppliedStereotype(resourceContainer,stereotypeName));
}

/**
* Returns a set of Linking Resources from the given Resource Container after Completion
**/
query getLinkingResourcesFromResourceContainerAfterCompletion(resourceContainer : ResourceContainer):Set(LinkingResource){
	return newResEnvironment.linkingResources__ResourceEnvironment->select(linkingResource : LinkingResource| linkingResource.connectedResourceContainers_LinkingResource->includes(resourceContainer));
}

/**
 * Returns all connectors whose target is an Assembly Context allocated to the replicable Resource Container and its source is allocated to another Resource Container
 */
query getAllConnectorsToAllocatedAssemblies(system : System, resourceContainer : ResourceContainer):Set(Connector){
	var connectors : Set(Connector) := system.connectors__ComposedStructure;
	var connectorsToReplicableAssemblies : Set(Connector);
	var providingAssemblyContext : AssemblyContext;
	var targetResContainer : ResourceContainer;
	connectors->forEach(connector){
		if(connector.oclIsTypeOf(AssemblyConnector)){
			var assemblyConnector : AssemblyConnector := connector.oclAsType(AssemblyConnector);
			providingAssemblyContext := getProvidingAssemblyContext(assemblyConnector);
			var requiringAssemblyContext : AssemblyContext := getRequiringAssemblyContext(assemblyConnector);
			var sourceResContainer : ResourceContainer := findResourceContainerBeforeCompletion(requiringAssemblyContext);
			targetResContainer := findResourceContainerBeforeCompletion(providingAssemblyContext);
			if(sourceResContainer.id != targetResContainer.id and targetResContainer.id = resourceContainer.id){
				connectorsToReplicableAssemblies+=assemblyConnector;
			};
		}
		else if(connector.oclIsTypeOf(ProvidedDelegationConnector)){
			var providedDelegationConnector : ProvidedDelegationConnector := connector.oclAsType(ProvidedDelegationConnector);
			providingAssemblyContext := getProvidingAssemblyContext(providedDelegationConnector);
			targetResContainer := findResourceContainerBeforeCompletion(providingAssemblyContext);
			if(targetResContainer.id = resourceContainer.id){
				connectorsToReplicableAssemblies += providedDelegationConnector;
			};
		};
	};
	
	return connectorsToReplicableAssemblies;
}

query getAllReplicableAssemblies(connectorsToReplicableAssemblies : Set(Connector)):Set(AssemblyContext){
	var providingAssemblyContexts : Set(AssemblyContext);
	connectorsToReplicableAssemblies ->forEach(connector){
 	if(connector.oclIsTypeOf(AssemblyConnector)){
 		var assemblyConnector : AssemblyConnector := connector.oclAsType(AssemblyConnector);
 		providingAssemblyContexts += getProvidingAssemblyContext(assemblyConnector);
 		
 	}
 	else if(connector.oclIsTypeOf(ProvidedDelegationConnector)){
 		var providedDelegationConnector : ProvidedDelegationConnector := connector.oclAsType(ProvidedDelegationConnector);	
 		providingAssemblyContexts += getProvidingAssemblyContext(providedDelegationConnector);
 	};
 };
 
 return providingAssemblyContexts;
}

/**
 * Returns the providing component of a given connector.
 */
query getProvidingAssemblyContext(providedDelegationConnector : ProvidedDelegationConnector) : AssemblyContext {
	return providedDelegationConnector.assemblyContext_ProvidedDelegationConnector;
}

/**
 * Returns the requiring component of a given connector.
 */
query getRequiringAssemblyContext(assemblyConnector : AssemblyConnector) : AssemblyContext {
	return assemblyConnector.requiringAssemblyContext_AssemblyConnector;
}

/**
 * Returns the providing component of a given connector.
 */
query getProvidingAssemblyContext(assemblyConnector : AssemblyConnector) : AssemblyContext {
	return assemblyConnector.providingAssemblyContext_AssemblyConnector;
}

/**
 * Returns the ResourceContainer the AllocationContext corresponds to in the Allocation before Completion
 */
query findResourceContainerBeforeCompletion(assemblyContext : AssemblyContext) : ResourceContainer {
	var acs : Bag(AllocationContext) := allocationBeforeCompletion.rootObjects().subobjects()[AllocationContext];
	return acs->selectOne(
		ac : AllocationContext | 
		ac.assemblyContext_AllocationContext.id = assemblyContext.id
		).resourceContainer_AllocationContext;
}

/**
 * Returns the ResourceContainer the AllocationContext corresponds to in the Allocation after Completion
 */
query findResourceContainerAfterCompletion(assemblyContext : AssemblyContext) : ResourceContainer {
	var acs : Bag(AllocationContext) := allocationAfterCompletion.rootObjects().subobjects()[AllocationContext];
	return acs->selectOne(
		ac : AllocationContext | 
		ac.assemblyContext_AllocationContext.id = assemblyContext.id
		).resourceContainer_AllocationContext;
}

/**
 * Returns the ResourceContainer of the ResourceEnvironment before Completion
 */
query getOldResourceContainer():Set(ResourceContainer){
	return oldResEnvironment.resourceContainer_ResourceEnvironment;
}

/**
 * Returns the ResourceContainer of the ResourceEnvironment after Completion
 */
query getNewResourceContainer():Set(ResourceContainer){
	return newResEnvironment.resourceContainer_ResourceEnvironment;
}