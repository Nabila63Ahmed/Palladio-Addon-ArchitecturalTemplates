import org.palladiosimulator.architecturaltemplates.catalog.black.ProfilesLibrary;

modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype PCMComposition uses pcm::core::composition('http://palladiosimulator.org/PalladioComponentModel/5.2');
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.2';

/**
 * Transforms a PCM instance with a Map and a Reduce Assembly Context (annotated with Map and Reduce roles)
 * to a PCM instance that includes these Assembly Contexts into a template for Apache's Hadoop Map Reduce.
 * The current template is not parametrized; therefore, this template is currently only serving as a
 * proof-of-concept.
 *
 * @author Sebastian Lehrig
 **/
 
transformation HadoopMapReduce(inout systemModel : PCM_SYS,
							  in templateRepositoryModel : PCM_REP,
							  in templateResourceEnvironmentModel : PCM_RES_ENV,
						   	  in templateAllocationModel : PCM_ALLOC,
						   	  out allocationModel : PCM_ALLOC);

property system : System;
property completedSystem : System;
property resourceEnvironment : ResourceEnvironment;

main() {
	log ('Architectural Template Transformation "Hadoop MapReduce" started!');
	
	system := systemModel.rootObjects()![System];
	assert fatal(hasAppliedStereotype(system, "HadoopMapReduceSystem"))
		with log ("The system is not a HadoopMapReduceSystem");
	
	var mapAssemblyContext :=
		system.assemblyContexts__ComposedStructure
		-> selectOne(assemblyContext : AssemblyContext |
			hasAppliedStereotype(assemblyContext, "MapAssemblyContext")
		);
	
	var reduceAssemblyContext :=
		system.assemblyContexts__ComposedStructure
		-> selectOne(assemblyContext : AssemblyContext |
			hasAppliedStereotype(assemblyContext, "ReduceAssemblyContext")
		);
	
	var systemProvidedRole : OperationProvidedRole :=
		 system.providedRoles_InterfaceProvidingEntity![OperationProvidedRole];
	
	resourceEnvironment := templateResourceEnvironmentModel.rootObjects()![ResourceEnvironment];
	
	systemModel.rootObjects()->forEach(rootObject){
	    systemModel.removeElement(rootObject);
	};
	templateAllocationModel.rootObjects()![Allocation].system_Allocation->deepclone();
	
	completedSystem := systemModel.rootObjects()![System];
	completedSystem.id := system.id;
	completedSystem.entityName := system.entityName;
	resolveReferences(
		completedSystem,
		templateAllocationModel.rootObjects()![Allocation].system_Allocation,
		templateRepositoryModel.rootObjects()![Repository]);
	getAssemblyContextsOfType("_6gjlQJzqEeWiy9Rfn8ggZg").map substitute(mapAssemblyContext);
	getAssemblyContextsOfType("_0PhFAJzqEeWiy9Rfn8ggZg").map substitute(reduceAssemblyContext);
	
	templateAllocationModel.rootObjects()![Allocation].map allocation2model();
	completedSystem.providedRoles_InterfaceProvidingEntity![OperationProvidedRole].map substitute(systemProvidedRole);

	log ('Architectural Template Transformation "Hadoop MapReduce" finished!');
}


helper resolveReferences(inout system : System, in isolatedTemplateSystem : System, in templateRepository : Repository) {
	system.assemblyContexts__ComposedStructure->map resolveReferences(isolatedTemplateSystem, templateRepository);
	system.connectors__ComposedStructure->map resolveReferences(isolatedTemplateSystem, templateRepository);
}

mapping inout AssemblyContext::resolveReferences(in isolatedTemplateSystem : System, in templateRepository : Repository) {
	var isolatedAssemblyContext := isolatedTemplateSystem.assemblyContexts__ComposedStructure
		->any(assemblyContext : AssemblyContext |
			assemblyContext.id = self.id
		);
	self.encapsulatedComponent__AssemblyContext := templateRepository.components__Repository
		->any(repositoryComponent : RepositoryComponent |
			repositoryComponent.id = isolatedAssemblyContext.encapsulatedComponent__AssemblyContext.id
		); 
}

mapping inout Connector::resolveReferences(in isolatedTemplateSystem : System, in templateRepository : Repository) 
	disjuncts AssemblyConnector::resolveReferences,
			  ProvidedDelegationConnector::resolveReferences,
			  RequiredDelegationConnector::resolveReferences {}
			  
mapping inout AssemblyConnector::resolveReferences(in isolatedTemplateSystem : System, in templateRepository : Repository) {
	var isolatedAssemblyConnector := isolatedTemplateSystem.connectors__ComposedStructure[AssemblyConnector]
		->any(assemblyConnector : AssemblyConnector |
			assemblyConnector.id = self.id
		);

	self.providedRole_AssemblyConnector :=
		templateRepository
		.components__Repository
		.providedRoles_InterfaceProvidingEntity[OperationProvidedRole]
		->any(providedRole : OperationProvidedRole |
			providedRole.id = isolatedAssemblyConnector.providedRole_AssemblyConnector.id
		); 
		
	self.requiredRole_AssemblyConnector :=
		templateRepository
		.components__Repository
		.requiredRoles_InterfaceRequiringEntity[OperationRequiredRole]
		->any(requiredRole : OperationRequiredRole |
			requiredRole.id = isolatedAssemblyConnector.requiredRole_AssemblyConnector.id
		); 
}

mapping inout ProvidedDelegationConnector::resolveReferences(in isolatedTemplateSystem : System, in templateRepository : Repository) {
	var isolatedProvidedDelegationConnector := isolatedTemplateSystem.connectors__ComposedStructure[ProvidedDelegationConnector]
		->any(providedDelegationConnector : ProvidedDelegationConnector |
			providedDelegationConnector.id = self.id
		);
	
	self.innerProvidedRole_ProvidedDelegationConnector :=
		templateRepository
		.components__Repository
		.providedRoles_InterfaceProvidingEntity[OperationProvidedRole]
		->any(providedRole : OperationProvidedRole |
			providedRole.id = isolatedProvidedDelegationConnector.innerProvidedRole_ProvidedDelegationConnector.id
		); 
}

mapping inout RequiredDelegationConnector::resolveReferences(in isolatedTemplateSystem : System, in templateRepository : Repository) {
	var isolatedRequiredDelegationConnector := isolatedTemplateSystem.connectors__ComposedStructure[RequiredDelegationConnector]
		->any(requiredDelegationConnector : RequiredDelegationConnector |
			requiredDelegationConnector.id = self.id
		);
	
	self.innerRequiredRole_RequiredDelegationConnector :=
		templateRepository
		.components__Repository
		.requiredRoles_InterfaceRequiringEntity[OperationRequiredRole]
		->any(requiredRole : OperationRequiredRole |
			requiredRole.id = isolatedRequiredDelegationConnector.innerRequiredRole_RequiredDelegationConnector.id
		); 
		
	self.outerRequiredRole_RequiredDelegationConnector :=
		templateRepository
		.components__Repository
		.requiredRoles_InterfaceRequiringEntity[OperationRequiredRole]
		->any(requiredRole : OperationRequiredRole |
			requiredRole.id = isolatedRequiredDelegationConnector.outerRequiredRole_RequiredDelegationConnector.id
		);  
}

mapping Allocation::allocation2model() : Allocation@allocationModel {
	entityName := self.entityName;
	targetResourceEnvironment_Allocation := resourceEnvironment;
	system_Allocation := completedSystem;
	allocationContexts_Allocation :=
		self.allocationContexts_Allocation
		.map allocationContext2model();
}

mapping AllocationContext::allocationContext2model() : AllocationContext@allocationModel {
	entityName := self.entityName;
	resourceContainer_AllocationContext :=
		resourceEnvironment
		.resourceContainer_ResourceEnvironment
		->selectOne(resourceContainer : ResourceContainer |
			resourceContainer.id = self.resourceContainer_AllocationContext.id
		);
	assemblyContext_AllocationContext :=
		completedSystem
		.assemblyContexts__ComposedStructure
		->selectOne(assemblyContext : AssemblyContext |
			assemblyContext.id = self.assemblyContext_AllocationContext.id
		);	
	eventChannel__AllocationContext := self.eventChannel__AllocationContext;
}

query getAssemblyContextsOfType(componentTypeID : String): Set(AssemblyContext) {
	return completedSystem.assemblyContexts__ComposedStructure
		->select(assemblyContext : AssemblyContext |
			assemblyContext.encapsulatedComponent__AssemblyContext.id = componentTypeID
		);
}

mapping AssemblyContext::substitute(newAssemblyContext : AssemblyContext) {
	var newAssemblyContextClone := newAssemblyContext.clone();
	newAssemblyContextClone.id := self.id;
	completedSystem.assemblyContexts__ComposedStructure += newAssemblyContextClone;
	completedSystem.connectors__ComposedStructure.map substitute(self, newAssemblyContextClone);
	systemModel.removeElement(self);
}

mapping inout Connector::substitute(oldAssemblyContext : AssemblyContext, newAssemblyContext : AssemblyContext) 
	disjuncts AssemblyConnector::substituteRequestor,
			  AssemblyConnector::substituteProvider,
			  ProvidedDelegationConnector::substitute,
			  RequiredDelegationConnector::substitute {}

mapping inout AssemblyConnector::substituteProvider(oldAssemblyContext : AssemblyContext, newAssemblyContext : AssemblyContext)
	when {self.providingAssemblyContext_AssemblyConnector.id = oldAssemblyContext.id} {
	self.providingAssemblyContext_AssemblyConnector := newAssemblyContext;
	self.providedRole_AssemblyConnector := 
		newAssemblyContext
		.encapsulatedComponent__AssemblyContext
		.providedRoles_InterfaceProvidingEntity![OperationProvidedRole];
}

mapping inout AssemblyConnector::substituteRequestor(oldAssemblyContext : AssemblyContext, newAssemblyContext : AssemblyContext)
	when {self.requiringAssemblyContext_AssemblyConnector.id = oldAssemblyContext.id} {
	self.requiringAssemblyContext_AssemblyConnector := newAssemblyContext;
	self.requiredRole_AssemblyConnector := 
		newAssemblyContext
		.encapsulatedComponent__AssemblyContext
		.requiredRoles_InterfaceRequiringEntity![OperationRequiredRole];
}

mapping inout ProvidedDelegationConnector::substitute(oldAssemblyContext : AssemblyContext, newAssemblyContext : AssemblyContext)
	when {self.assemblyContext_ProvidedDelegationConnector.id = oldAssemblyContext.id} {
	self.assemblyContext_ProvidedDelegationConnector := newAssemblyContext;
	self.innerProvidedRole_ProvidedDelegationConnector := newAssemblyContext
		.encapsulatedComponent__AssemblyContext
		.providedRoles_InterfaceProvidingEntity![OperationProvidedRole];
}

mapping inout RequiredDelegationConnector::substitute(oldAssemblyContext : AssemblyContext, newAssemblyContext : AssemblyContext)
	when {self.assemblyContext_RequiredDelegationConnector.id = oldAssemblyContext.id} {
	self.assemblyContext_RequiredDelegationConnector := newAssemblyContext;
	self.innerRequiredRole_RequiredDelegationConnector := newAssemblyContext
		.encapsulatedComponent__AssemblyContext
		.requiredRoles_InterfaceRequiringEntity![OperationRequiredRole];
}

mapping OperationProvidedRole::substitute(inout newProvidedRole : OperationProvidedRole) {
	completedSystem.providedRoles_InterfaceProvidingEntity += newProvidedRole;
	completedSystem
		.connectors__ComposedStructure![ProvidedDelegationConnector]
		.outerProvidedRole_ProvidedDelegationConnector := newProvidedRole;
	
	systemModel.removeElement(self);
}


