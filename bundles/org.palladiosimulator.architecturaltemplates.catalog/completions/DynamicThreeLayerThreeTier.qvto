import org.palladiosimulator.architecturaltemplates.catalog.black.ProfilesLibrary;
import StaticResourceContainerLoadbalancing;

modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype PCM_USE uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.2';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
modeltype PCMComposition uses pcm::core::composition('http://palladiosimulator.org/PalladioComponentModel/5.2');

/**
 * Transforms a 3-layer PCM instance (System and Resource Container annotated with Dynamic 3-layer 3-tier AT roles) 
 * to a PCM instance that is a DynamicHorizontalScalingResourceContainerSystem. 
 * Moreover, the middle tier resource container is loadbalanced and 
 * replicated by the defined number of replicas. 
 *
 * @author Daria Giacinto
 **/

transformation DynamicThreeLayerThreeTier(inout pcmAllocation : PCM_ALLOC) 
						   			 access transformation StaticResourceContainerLoadbalancing;	
						   			 
//String constants of the Dynamic Three Layer Three Tier Profile					   			 
property dynamicThreeLayerThreeTierProfile : String = "DynamicThreeLayerThreeTierProfile";
property dynamicThreeLayerThreeTierSystemStereotype : String = "DynamicThreeLayerThreeTierSystem";
property replicableMiddleTierStereotype : String = "ReplicableMiddleTier";  

//String constants of the Dynamic Horizontal Scaling Resource Container Profile					   			 
property dynamicHorizontalScalingResourceContainerProfile : String = "DynamicHorizontalScalingResourceContainerProfile";
property dynamicHorizontalScalingResourceContainerSystemStereotype : String = "DynamicHorizontalScalingResourceContainerSystem";
property replicableResourceContainerStereotype : String = "ReplicableResourceContainer"; 

//String constants of the Tagged Valued of the Dynamic Three Layer Three Tier/Dynamic Horizontal Scaling Resource Container Profile					   			 
property scaleInThresholdTaggedValue : String = "scaleInThreshold";
property scaleOutThresholdTaggedValue : String = "scaleOutThreshold";
property numberOfReplicasTaggedValue : String = "numberOfReplicas";

main() {	
	log ('Architectural Template Transformation "Dynamic Three Layer Three Tier" started!');
	
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var system : System := allocation.system_Allocation;
	var resourceEnvironment : ResourceEnvironment := allocation.targetResourceEnvironment_Allocation;
	var resourceContainers : Set(ResourceContainer) := resourceEnvironment.resourceContainer_ResourceEnvironment;
	
	assert fatal(isProfileApplied(system.oclAsType(EObject), dynamicThreeLayerThreeTierProfile))
		with log ("The System has no " + dynamicThreeLayerThreeTierProfile + " applied.");
		
	assert fatal(isProfileApplied(resourceEnvironment.oclAsType(EObject), dynamicThreeLayerThreeTierProfile))
		with log ("The resource environment has no " + dynamicThreeLayerThreeTierProfile + " applied.");
	
	assert fatal(hasAppliedStereotype(system, dynamicThreeLayerThreeTierSystemStereotype))
		with log ("The System is not a " + dynamicThreeLayerThreeTierSystemStereotype + "!");
		
	assert fatal(appliedStereotypesEqualsOne(resourceContainers, replicableMiddleTierStereotype))
		with log ("The Resource Environment consists of zero or more than one " + replicableMiddleTierStereotype + "!");	
		
	var middleTierResourceContainer : ResourceContainer := resourceContainers->selectOne(resourceContainer | hasAppliedStereotype(resourceContainer, replicableMiddleTierStereotype));
	convertMiddleTierIntoReplicableResourceContainer(middleTierResourceContainer,system);
	
	new StaticResourceContainerLoadbalancing(pcmAllocation)->transform();
	
	log ('Architectural Template Transformation "Dynamic Three Layer Three Tier" finished!');
}


	
helper convertMiddleTierIntoReplicableResourceContainer(middleTier : ResourceContainer, system : System){
	applyProfile(system.oclAsType(EObject), dynamicHorizontalScalingResourceContainerProfile);
	applyStereotype(system, dynamicHorizontalScalingResourceContainerSystemStereotype);
	applyProfile(middleTier.oclAsType(EObject), dynamicHorizontalScalingResourceContainerProfile);
	applyStereotype(middleTier, replicableResourceContainerStereotype);
	setReplicableResourceContainerTaggedValues(middleTier);
	removeStereotypeApplications(middleTier, replicableMiddleTierStereotype);
}

helper setReplicableResourceContainerTaggedValues(middleTier : ResourceContainer){
	var scaleInThreshold : Real := getDoubleTaggedValue(middleTier, scaleInThresholdTaggedValue, replicableMiddleTierStereotype);
	var scaleOutThreshold : Real:= getDoubleTaggedValue(middleTier, scaleOutThresholdTaggedValue, replicableMiddleTierStereotype);
	var numberOfMiddleTierReplicas : Integer := getIntTaggedValue(middleTier, numberOfReplicasTaggedValue, replicableMiddleTierStereotype);	
 	setTaggedValue(middleTier, numberOfMiddleTierReplicas, replicableResourceContainerStereotype, numberOfReplicasTaggedValue);
 	setDoubleTaggedValue(middleTier, scaleInThreshold, replicableResourceContainerStereotype, scaleInThresholdTaggedValue);
 	setDoubleTaggedValue(middleTier, scaleOutThreshold, replicableResourceContainerStereotype, scaleOutThresholdTaggedValue);
}
